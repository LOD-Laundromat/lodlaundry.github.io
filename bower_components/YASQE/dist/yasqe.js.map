{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/main.js",
    "lib/deparam.js",
    "lib/flint.js",
    "lib/trie.js",
    "node_modules/codemirror/addon/edit/matchbrackets.js",
    "node_modules/codemirror/addon/hint/show-hint.js",
    "node_modules/codemirror/addon/runmode/runmode.js",
    "node_modules/codemirror/addon/search/searchcursor.js",
    "node_modules/yasgui-utils/node_modules/store/store.js",
    "node_modules/yasgui-utils/package.json",
    "node_modules/yasgui-utils/src/determineId.js",
    "node_modules/yasgui-utils/src/imgs.js",
    "node_modules/yasgui-utils/src/main.js",
    "node_modules/yasgui-utils/src/storage.js",
    "package.json"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACx1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzwlvvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function (global){\n'use strict';\nvar $ = (typeof window !== \"undefined\" ? window.jQuery : typeof global !== \"undefined\" ? global.jQuery : null);\nrequire(\"../lib/deparam.js\");\nvar CodeMirror = (typeof window !== \"undefined\" ? window.CodeMirror : typeof global !== \"undefined\" ? global.CodeMirror : null);\n\nrequire('codemirror/addon/hint/show-hint.js');\nrequire('codemirror/addon/search/searchcursor.js');\nrequire('codemirror/addon/edit/matchbrackets.js');\nrequire('codemirror/addon/runmode/runmode.js');\n\nwindow.console = window.console || {\"log\":function(){}};//make sure any console statements\n\nrequire('../lib/flint.js');\nvar Trie = require('../lib/trie.js');\n\n/**\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\n * \n * @constructor\n * @param {DOM-Element} parent element to append editor to.\n * @param {object} settings\n * @class YASQE\n * @return {doc} YASQE document\n */\nvar root = module.exports = function(parent, config) {\n\tconfig = extendConfig(config);\n\tvar cm = extendCmInstance(CodeMirror(parent, config));\n\tpostProcessCmElement(cm);\n\treturn cm;\n};\n\n/**\n * Extend config object, which we will pass on to the CM constructor later on.\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\n * people who add their own onblur events to the config Additionally, need this\n * to include the CM defaults ourselves. CodeMirror has a method for including\n * defaults, but we can't rely on that one: it assumes flat config object, where\n * we have nested objects (e.g. the persistency option)\n * \n * @private\n */\nvar extendConfig = function(config) {\n\tvar extendedConfig = $.extend(true, {}, root.defaults, config);\n\t// I know, codemirror deals with  default options as well. \n\t//However, it does not do this recursively (i.e. the persistency option)\n\treturn extendedConfig;\n};\n/**\n * Add extra functions to the CM document (i.e. the codemirror instantiated\n * object)\n * \n * @private\n */\nvar extendCmInstance = function(cm) {\n\t/**\n\t * Execute query. Pass a callback function, or a configuration object (see\n\t * default settings below for possible values) I.e., you can change the\n\t * query configuration by either changing the default settings, changing the\n\t * settings of this document, or by passing query settings to this function\n\t * \n\t * @method doc.query\n\t * @param function|object\n\t */\n\tcm.query = function(callbackOrConfig) {\n\t\troot.executeQuery(cm, callbackOrConfig);\n\t};\n\t\n\t/**\n\t * Fetch defined prefixes from query string\n\t * \n\t * @method doc.getPrefixesFromQuery\n\t * @return object\n\t */\n\tcm.getPrefixesFromQuery = function() {\n\t\treturn getPrefixesFromQuery(cm);\n\t};\n\t\n\t/**\n\t * Fetch the query type (i.e., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\n\t * \n\t * @method doc.getQueryType\n\t * @return string\n\t * \n\t */\n\t cm.getQueryType = function() {\n\t\t return cm.queryType;\n\t };\n\t/**\n\t * Fetch the query mode: 'query' or 'update'\n\t * \n\t * @method doc.getQueryMode\n\t * @return string\n\t * \n\t */\n\t cm.getQueryMode = function() {\n\t\t var type = cm.getQueryType();\n\t\t if (type==\"INSERT\" || type==\"DELETE\" || type==\"LOAD\" || type==\"CLEAR\" || type==\"CREATE\" || type==\"DROP\" || type==\"COPY\" || type==\"MOVE\" || type==\"ADD\") {\n\t\t\t return \"update\";\n\t\t } else {\n\t\t\t return \"query\";\n\t\t }\n\t\t\t\t\n\t };\n\t/**\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\n\t * \n\t * @method doc.storeBulkCompletions\n\t * @param type {\"prefixes\", \"properties\", \"classes\"}\n\t * @param completions {array}\n\t */\n\tcm.storeBulkCompletions = function(type, completions) {\n\t\t// store array as trie\n\t\ttries[type] = new Trie();\n\t\tfor (var i = 0; i < completions.length; i++) {\n\t\t\ttries[type].insert(completions[i]);\n\t\t}\n\t\t// store in localstorage as well\n\t\tvar storageId = getPersistencyId(cm, cm.options.autocompletions[type].persistent);\n\t\tif (storageId) require(\"yasgui-utils\").storage.set(storageId, completions, \"month\");\n\t};\n\tcm.setCheckSyntaxErrors = function(isEnabled) {\n\t\tcm.options.syntaxErrorCheck = isEnabled;\n\t\tcheckSyntax(cm);\n\t};\n\treturn cm;\n};\n\nvar postProcessCmElement = function(cm) {\n\t\n\t/**\n\t * Set doc value\n\t */\n\tvar storageId = getPersistencyId(cm, cm.options.persistent);\n\tif (storageId) {\n\t\tvar valueFromStorage = require(\"yasgui-utils\").storage.get(storageId);\n\t\tif (valueFromStorage)\n\t\t\tcm.setValue(valueFromStorage);\n\t}\n\t\n\troot.drawButtons(cm);\n\n\t/**\n\t * Add event handlers\n\t */\n\tcm.on('blur', function(cm, eventInfo) {\n\t\troot.storeQuery(cm);\n\t});\n\tcm.on('change', function(cm, eventInfo) {\n\t\tcheckSyntax(cm);\n\t\troot.appendPrefixIfNeeded(cm);\n\t\troot.updateQueryButton(cm);\n\t\troot.positionAbsoluteItems(cm);\n\t});\n\t\n\tcm.on('cursorActivity', function(cm, eventInfo) {\n\t\troot.autoComplete(cm, true);\n\t\tupdateButtonsTransparency(cm);\n\t});\n\tcm.prevQueryValid = false;\n\tcheckSyntax(cm);// on first load, check as well (our stored or default query might be incorrect as well)\n\troot.positionAbsoluteItems(cm);\n\t/**\n\t * load bulk completions\n\t */\n\tif (cm.options.autocompletions) {\n\t\tfor ( var completionType in cm.options.autocompletions) {\n\t\t\tif (cm.options.autocompletions[completionType].bulk) {\n\t\t\t\tloadBulkCompletions(cm, completionType);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * check url args and modify yasqe settings if needed\n\t */\n\tif (cm.options.consumeShareLink) {\n\t\tvar urlParams = $.deparam(window.location.search.substring(1));\n\t\tcm.options.consumeShareLink(cm, urlParams);\n\t}\n};\n\n/**\n * privates\n */\n// used to store bulk autocompletions in\nvar tries = {};\n// this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\nvar tokenTypes = {\n\t\"string-2\" : \"prefixed\",\n\t\"atom\": \"var\"\n};\nvar keyExists = function(objectToTest, key) {\n\tvar exists = false;\n\n\ttry {\n\t\tif (objectToTest[key] !== undefined)\n\t\t\texists = true;\n\t} catch (e) {\n\t}\n\treturn exists;\n};\n\n\nvar loadBulkCompletions = function(cm, type) {\n\tvar completions = null;\n\tif (keyExists(cm.options.autocompletions[type], \"get\"))\n\t\tcompletions = cm.options.autocompletions[type].get;\n\tif (completions instanceof Array) {\n\t\t// we don't care whether the completions are already stored in\n\t\t// localstorage. just use this one\n\t\tcm.storeBulkCompletions(type, completions);\n\t} else {\n\t\t// if completions are defined in localstorage, use those! (calling the\n\t\t// function may come with overhead (e.g. async calls))\n\t\tvar completionsFromStorage = null;\n\t\tif (getPersistencyId(cm, cm.options.autocompletions[type].persistent))\n\t\t\tcompletionsFromStorage = require(\"yasgui-utils\").storage.get(\n\t\t\t\t\tgetPersistencyId(cm,\n\t\t\t\t\t\t\tcm.options.autocompletions[type].persistent));\n\t\tif (completionsFromStorage && completionsFromStorage instanceof Array\n\t\t\t\t&& completionsFromStorage.length > 0) {\n\t\t\tcm.storeBulkCompletions(type, completionsFromStorage);\n\t\t} else {\n\t\t\t// nothing in storage. check whether we have a function via which we\n\t\t\t// can get our prefixes\n\t\t\tif (completions instanceof Function) {\n\t\t\t\tvar functionResult = completions(cm);\n\t\t\t\tif (functionResult && functionResult instanceof Array\n\t\t\t\t\t\t&& functionResult.length > 0) {\n\t\t\t\t\t// function returned an array (if this an async function, we\n\t\t\t\t\t// won't get a direct function result)\n\t\t\t\t\tcm.storeBulkCompletions(type, functionResult);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\n * \n * @param cm\n * @returns {Array}\n */\nvar getPrefixesFromQuery = function(cm) {\n\tvar queryPrefixes = {};\n\tvar numLines = cm.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tvar firstToken = getNextNonWsToken(cm, i);\n\t\tif (firstToken != null && firstToken.string.toUpperCase() == \"PREFIX\") {\n\t\t\tvar prefix = getNextNonWsToken(cm, i, firstToken.end + 1);\n\t\t\tif (prefix) {\n\t\t\t\tvar uri = getNextNonWsToken(cm, i, prefix.end + 1);\n\t\t\t\tif (prefix != null && prefix.string.length > 0 && uri != null\n\t\t\t\t\t\t&& uri.string.length > 0) {\n\t\t\t\t\tvar uriString = uri.string;\n\t\t\t\t\tif (uriString.indexOf(\"<\") == 0)\n\t\t\t\t\t\turiString = uriString.substring(1);\n\t\t\t\t\tif (uriString.slice(-1) == \">\")\n\t\t\t\t\t\turiString = uriString\n\t\t\t\t\t\t\t\t.substring(0, uriString.length - 1);\n\t\t\t\t\tqueryPrefixes[prefix.string] = uriString;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn queryPrefixes;\n};\n\n/**\n * Append prefix declaration to list of prefixes in query window.\n * \n * @param cm\n * @param prefix\n */\nvar appendToPrefixes = function(cm, prefix) {\n\tvar lastPrefix = null;\n\tvar lastPrefixLine = 0;\n\tvar numLines = cm.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tvar firstToken = getNextNonWsToken(cm, i);\n\t\tif (firstToken != null\n\t\t\t\t&& (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\n\t\t\tlastPrefix = firstToken;\n\t\t\tlastPrefixLine = i;\n\t\t}\n\t}\n\n\tif (lastPrefix == null) {\n\t\tcm.replaceRange(\"PREFIX \" + prefix + \"\\n\", {\n\t\t\tline : 0,\n\t\t\tch : 0\n\t\t});\n\t} else {\n\t\tvar previousIndent = getIndentFromLine(cm, lastPrefixLine);\n\t\tcm.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefix, {\n\t\t\tline : lastPrefixLine\n\t\t});\n\t}\n};\n/**\n * Update transparency of buttons. Increase transparency when cursor is below buttons\n */\n\nvar updateButtonsTransparency = function(cm) {\n\tcm.cursor = $(\".CodeMirror-cursor\");\n\tif (cm.buttons && cm.buttons.is(\":visible\") && cm.cursor.length > 0) {\n\t\tif (elementsOverlap(cm.cursor, cm.buttons)) {\n\t\t\tcm.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\n\t\t} else {\n\t\t\tcm.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\n\t\t}\n\t}\n};\n\n\nvar elementsOverlap = (function () {\n    function getPositions( elem ) {\n        var pos, width, height;\n        pos = $( elem ).offset();\n        width = $( elem ).width();\n        height = $( elem ).height();\n        return [ [ pos.left, pos.left + width ], [ pos.top, pos.top + height ] ];\n    }\n\n    function comparePositions( p1, p2 ) {\n        var r1, r2;\n        r1 = p1[0] < p2[0] ? p1 : p2;\n        r2 = p1[0] < p2[0] ? p2 : p1;\n        return r1[1] > r2[0] || r1[0] === r2[0];\n    }\n\n    return function ( a, b ) {\n        var pos1 = getPositions( a ),\n            pos2 = getPositions( b );\n        return comparePositions( pos1[0], pos2[0] ) && comparePositions( pos1[1], pos2[1] );\n    };\n})();\n\n\n/**\n * Get the used indentation for a certain line\n * \n * @param cm\n * @param line\n * @param charNumber\n * @returns\n */\nvar getIndentFromLine = function(cm, line, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = cm.getTokenAt({\n\t\tline : line,\n\t\tch : charNumber\n\t});\n\tif (token == null || token == undefined || token.type != \"ws\") {\n\t\treturn \"\";\n\t} else {\n\t\treturn token.string + getIndentFromLine(cm, line, token.end + 1);\n\t}\n\t;\n};\n\n\nvar getNextNonWsToken = function(cm, lineNumber, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = cm.getTokenAt({\n\t\tline : lineNumber,\n\t\tch : charNumber\n\t});\n\tif (token == null || token == undefined || token.end < charNumber) {\n\t\treturn null;\n\t}\n\tif (token.type == \"ws\") {\n\t\treturn getNextNonWsToken(cm, lineNumber, token.end + 1);\n\t}\n\treturn token;\n};\n\nvar clearError = null;\nvar checkSyntax = function(cm, deepcheck) {\n\t\n\tcm.queryValid = true;\n\tif (clearError) {\n\t\tclearError();\n\t\tclearError = null;\n\t}\n\tcm.clearGutter(\"gutterErrorBar\");\n\t\n\tvar state = null;\n\tfor (var l = 0; l < cm.lineCount(); ++l) {\n\t\tvar precise = false;\n\t\tif (!cm.prevQueryValid) {\n\t\t\t// we don't want cached information in this case, otherwise the\n\t\t\t// previous error sign might still show up,\n\t\t\t// even though the syntax error might be gone already\n\t\t\tprecise = true;\n\t\t}\n\t\tvar token = cm.getTokenAt({\n\t\t\tline : l,\n\t\t\tch : cm.getLine(l).length\n\t\t}, precise);\n\t\tvar state = token.state;\n\t\tcm.queryType = state.queryType;\n\t\tif (state.OK == false) {\n\t\t\tif (!cm.options.syntaxErrorCheck) {\n\t\t\t\t//the library we use already marks everything as being an error. Overwrite this class attribute.\n\t\t\t\t$(cm.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\n\t\t\t\t//we don't want to gutter error, so return\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar error = document.createElement('span');\n\t\t\terror.innerHTML = \"&rarr;\";\n\t\t\terror.className = \"gutterError\";\n\t\t\tcm.setGutterMarker(l, \"gutterErrorBar\", error);\n\t\t\tclearError = function() {\n\t\t\t\tcm.markText({\n\t\t\t\t\tline : l,\n\t\t\t\t\tch : state.errorStartPos\n\t\t\t\t}, {\n\t\t\t\t\tline : l,\n\t\t\t\t\tch : state.errorEndPos\n\t\t\t\t}, \"sp-error\");\n\t\t\t};\n\t\t\tcm.queryValid = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tcm.prevQueryValid = cm.queryValid;\n\tif (deepcheck) {\n\t\tif (state != null && state.stack != undefined) {\n\t\t\tvar stack = state.stack, len = state.stack.length;\n\t\t\t// Because incremental parser doesn't receive end-of-input\n\t\t\t// it can't clear stack, so we have to check that whatever\n\t\t\t// is left on the stack is nillable\n\t\t\tif (len > 1)\n\t\t\t\tcm.queryValid = false;\n\t\t\telse if (len == 1) {\n\t\t\t\tif (stack[0] != \"solutionModifier\"\n\t\t\t\t\t\t&& stack[0] != \"?limitOffsetClauses\"\n\t\t\t\t\t\t&& stack[0] != \"?offsetClause\")\n\t\t\t\t\tcm.queryValid = false;\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Static Utils\n */\n// first take all CodeMirror references and store them in the YASQE object\n$.extend(root, CodeMirror);\n\nroot.positionAbsoluteItems = function(cm) {\n\tvar scrollBar = $(cm.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\tvar offset = 0;\n\tif (scrollBar.is(\":visible\")) {\n\t\toffset = scrollBar.outerWidth();\n\t}\n\tvar completionNotification = $(cm.getWrapperElement()).find(\".completionNotification\");\n\tif (completionNotification.is(\":visible\")) completionNotification.css(\"right\", offset);\n\tif (cm.buttons.is(\":visible\")) cm.buttons.css(\"right\", offset);\n};\n\n/**\n * Create a share link\n * \n * @method YASQE.createShareLink\n * @param {doc} YASQE document\n * @default {query: doc.getValue()}\n * @return object\n */\nroot.createShareLink = function(cm) {\n\treturn {query: cm.getValue()};\n};\n\n/**\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\n * \n * @method YASQE.consumeShareLink\n * @param {doc} YASQE document\n */\nroot.consumeShareLink = function(cm, urlParams) {\n\tif (urlParams.query) {\n\t\tcm.setValue(urlParams.query);\n\t}\n};\nroot.drawButtons = function(cm) {\n\tcm.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(cm.getWrapperElement()));\n\t\n\tif (cm.options.createShareLink) {\n\t\t\n\t\tvar svgShare = $(require(\"yasgui-utils\").imgs.getElement({id: \"share\", width: \"30px\", height: \"30px\"}));\n\t\tsvgShare.click(function(event){\n\t\t\tevent.stopPropagation();\n\t\t\tvar popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(cm.buttons);\n\t\t\t$('html').click(function() {\n\t\t\t\tif (popup) popup.remove();\n\t\t\t});\n\n\t\t\tpopup.click(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t});\n\t\t\tvar textAreaLink = $(\"<textarea></textarea>\").val(location.protocol + '//' + location.host + location.pathname + \"?\" + $.param(cm.options.createShareLink(cm)));\n\t\t\t\n\t\t\ttextAreaLink.focus(function() {\n\t\t\t    var $this = $(this);\n\t\t\t    $this.select();\n\n\t\t\t    // Work around Chrome's little problem\n\t\t\t    $this.mouseup(function() {\n\t\t\t        // Prevent further mouseup intervention\n\t\t\t        $this.unbind(\"mouseup\");\n\t\t\t        return false;\n\t\t\t    });\n\t\t\t});\n\t\t\t\n\t\t\tpopup.empty().append(textAreaLink);\n\t\t\tvar positions = svgShare.position();\n\t\t\tpopup.css(\"top\", (positions.top + svgShare.outerHeight()) + \"px\").css(\"left\", ((positions.left + svgShare.outerWidth()) - popup.outerWidth()) + \"px\");\n\t\t})\n\t\t.addClass(\"yasqe_share\")\n\t\t.attr(\"title\", \"Share your query\")\n\t\t.appendTo(cm.buttons);\n\t\t\n\t}\n\n\tif (cm.options.sparql.showQueryButton) {\n\t\tvar height = 40;\n\t\tvar width = 40;\n\t\t$(\"<div class='yasqe_queryButton'></div>\")\n\t\t \t.click(function(){\n\t\t \t\tif ($(this).hasClass(\"query_busy\")) {\n\t\t \t\t\tif (cm.xhr) cm.xhr.abort();\n\t\t \t\t\troot.updateQueryButton(cm);\n\t\t \t\t} else {\n\t\t \t\t\tcm.query();\n\t\t \t\t}\n\t\t \t})\n\t\t \t.height(height)\n\t\t \t.width(width)\n\t\t \t.appendTo(cm.buttons);\n\t\troot.updateQueryButton(cm);\n\t}\n\t\n};\n\n\nvar queryButtonIds = {\n\t\"busy\": \"loader\",\n\t\"valid\": \"query\",\n\t\"error\": \"queryInvalid\"\n};\n\n/**\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\n * \n * @param {doc} YASQE document\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\n */\nroot.updateQueryButton = function(cm, status) {\n\tvar queryButton = $(cm.getWrapperElement()).find(\".yasqe_queryButton\");\n\tif (queryButton.length == 0) return;//no query button drawn\n\t\n\t//detect status\n\tif (!status) {\n\t\tstatus = \"valid\";\n\t\tif (cm.queryValid === false) status = \"error\";\n\t}\n\tif (status != cm.queryStatus && (status == \"busy\" || status==\"valid\" || status == \"error\")) {\n\t\tqueryButton\n\t\t\t.empty()\n\t\t\t.removeClass (function (index, classNames) {\n\t\t\t\treturn classNames.split(\" \").filter(function(c) {\n\t\t\t\t\t//remove classname from previous status\n\t\t\t\t    return c.indexOf(\"query_\") == 0;\n\t\t\t\t}).join(\" \");\n\t\t\t})\n\t\t\t.addClass(\"query_\" + status)\n\t\t\t.append(require(\"yasgui-utils\").imgs.getElement({id: queryButtonIds[status], width: \"100%\", height: \"100%\"}));\n\t\tcm.queryStatus = status;\n\t}\n};\n/**\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\n * \n * @method YASQE.fromTextArea\n * @param textArea {DOM element}\n * @param config {object}\n * @returns {doc} YASQE document\n */\nroot.fromTextArea = function(textAreaEl, config) {\n\tconfig = extendConfig(config);\n\tvar cm = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\n\tpostProcessCmElement(cm);\n\treturn cm;\n};\n\n/**\n * Fetch all the used variables names from this query\n * \n * @method YASQE.getAllVariableNames\n * @param {doc} YASQE document\n * @param token {object}\n * @returns variableNames {array}\n */\n\nroot.autocompleteVariables = function(cm, token) {\n\tif (token.trim().length == 0) return [];//nothing to autocomplete\n\tvar distinctVars = {};\n\t//do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\n\t$(cm.getWrapperElement()).find(\".cm-atom\").each(function() {\n\t\tvar variable = this.innerHTML;\n\t\tif (variable.indexOf(\"?\") == 0) {\n\t\t\t//ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\n\t\t\tvar nextEl = $(this).next();\n\t\t\tvar nextElClass = nextEl.attr('class');\n\t\t\tif (nextElClass && nextEl.attr('class').indexOf(\"cm-atom\") >= 0) {\n\t\t\t\tvariable += nextEl.text();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//skip single questionmarks\n\t\t\tif (variable.length <= 1) return;\n\t\t\t\n\t\t\t//it should match our token ofcourse\n\t\t\tif (variable.indexOf(token) !== 0) return;\n\t\t\t\n\t\t\t//skip exact matches\n\t\t\tif (variable == token) return;\n\t\t\t\n\t\t\t//store in map so we have a unique list \n\t\t\tdistinctVars[variable] = true;\n\t\t\t\n\t\t\t\n\t\t}\n\t});\n\tvar variables = [];\n\tfor (var variable in distinctVars) {\n\t\tvariables.push(variable);\n\t}\n\tvariables.sort();\n\treturn variables;\n};\n/**\n * Fetch prefixes from prefix.cc, and store in the YASQE object\n * \n * @param doc {YASQE}\n * @method YASQE.fetchFromPrefixCc\n */\nroot.fetchFromPrefixCc = function(cm) {\n\t$.get(\"http://prefix.cc/popular/all.file.json\", function(data) {\n\t\tvar prefixArray = [];\n\t\tfor ( var prefix in data) {\n\t\t\tif (prefix == \"bif\")\n\t\t\t\tcontinue;// skip this one! see #231\n\t\t\tvar completeString = prefix + \": <\" + data[prefix] + \">\";\n\t\t\tprefixArray.push(completeString);// the array we want to store in localstorage\n\t\t}\n\t\t\n\t\tprefixArray.sort();\n\t\tcm.storeBulkCompletions(\"prefixes\", prefixArray);\n\t});\n};\n/**\n * Get accept header for this particular query. Get JSON for regular queries, and text/plain for update queries\n * \n * @param doc {YASQE}\n * @method YASQE.getAcceptHeader\n */\nroot.getAcceptHeader = function(cm) {\n\tif (cm.getQueryMode() == \"update\") {\n\t\treturn \"text/plain\";\n\t} else {\n\t\treturn \"application/sparql-results+json\";\n\t}\n};\n/**\n * Determine unique ID of the YASQE object. Useful when several objects are\n * loaded on the same page, and all have 'persistency' enabled. Currently, the\n * ID is determined by selecting the nearest parent in the DOM with an ID set\n * \n * @param doc {YASQE}\n * @method YASQE.determineId\n */\nroot.determineId = function(cm) {\n\treturn $(cm.getWrapperElement()).closest('[id]').attr('id');\n};\n\nroot.storeQuery = function(cm) {\n\tvar storageId = getPersistencyId(cm, cm.options.persistent);\n\tif (storageId) {\n\t\trequire(\"yasgui-utils\").storage.set(storageId, cm.getValue(), \"month\");\n\t}\n};\nroot.commentLines = function(cm) {\n\tvar startLine = cm.getCursor(true).line;\n\tvar endLine = cm.getCursor(false).line;\n\tvar min = Math.min(startLine, endLine);\n\tvar max = Math.max(startLine, endLine);\n\t\n\t// if all lines start with #, remove this char. Otherwise add this char\n\tvar linesAreCommented = true;\n\tfor (var i = min; i <= max; i++) {\n\t\tvar line = cm.getLine(i);\n\t\tif (line.length == 0 || line.substring(0, 1) != \"#\") {\n\t\t\tlinesAreCommented = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = min; i <= max; i++) {\n\t\tif (linesAreCommented) {\n\t\t\t// lines are commented, so remove comments\n\t\t\tcm.replaceRange(\"\", {\n\t\t\t\tline : i,\n\t\t\t\tch : 0\n\t\t\t}, {\n\t\t\t\tline : i,\n\t\t\t\tch : 1\n\t\t\t});\n\t\t} else {\n\t\t\t// Not all lines are commented, so add comments\n\t\t\tcm.replaceRange(\"#\", {\n\t\t\t\tline : i,\n\t\t\t\tch : 0\n\t\t\t});\n\t\t}\n\n\t}\n};\n\nroot.copyLineUp = function(cm) {\n\tvar cursor = cm.getCursor();\n\tvar lineCount = cm.lineCount();\n\t// First create new empty line at end of text\n\tcm.replaceRange(\"\\n\", {\n\t\tline : lineCount - 1,\n\t\tch : cm.getLine(lineCount - 1).length\n\t});\n\t// Copy all lines to their next line\n\tfor (var i = lineCount; i > cursor.line; i--) {\n\t\tvar line = cm.getLine(i - 1);\n\t\tcm.replaceRange(line, {\n\t\t\tline : i,\n\t\t\tch : 0\n\t\t}, {\n\t\t\tline : i,\n\t\t\tch : cm.getLine(i).length\n\t\t});\n\t}\n};\nroot.copyLineDown = function(cm) {\n\troot.copyLineUp(cm);\n\t// Make sure cursor goes one down (we are copying downwards)\n\tvar cursor = cm.getCursor();\n\tcursor.line++;\n\tcm.setCursor(cursor);\n};\nroot.doAutoFormat = function(cm) {\n\tif (cm.somethingSelected()) {\n\t\tvar to = {\n\t\t\tline : cm.getCursor(false).line,\n\t\t\tch : cm.getSelection().length\n\t\t};\n\t\tautoFormatRange(cm, cm.getCursor(true), to);\n\t} else {\n\t\tvar totalLines = cm.lineCount();\n\t\tvar totalChars = cm.getTextArea().value.length;\n\t\tautoFormatRange(cm, {\n\t\t\tline : 0,\n\t\t\tch : 0\n\t\t}, {\n\t\t\tline : totalLines,\n\t\t\tch : totalChars\n\t\t});\n\t}\n\n};\n\nroot.executeQuery = function(cm, callbackOrConfig) {\n\tvar callback = (typeof callbackOrConfig == \"function\" ? callbackOrConfig: null);\n\tvar config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\n\tvar queryMode = cm.getQueryMode();\n\tif (cm.options.sparql)\n\t\tconfig = $.extend({}, cm.options.sparql, config);\n\n\tif (!config.endpoint || config.endpoint.length == 0)\n\t\treturn;// nothing to query!\n\n\t/**\n\t * initialize ajax config\n\t */\n\tvar ajaxConfig = {\n\t\turl : (typeof config.endpoint == \"function\"? config.endpoint(cm): config.endpoint),\n\t\ttype : (typeof config.requestMethod == \"function\"? config.requestMethod(cm): config.requestMethod),\n\t\tdata : [{\n\t\t\tname : queryMode,\n\t\t\tvalue : cm.getValue()\n\t\t}],\n\t\theaders : {\n\t\t\tAccept : (typeof config.acceptHeader == \"function\"? config.acceptHeader(cm): config.acceptHeader),\n\t\t}\n\t};\n\n\t/**\n\t * add complete, beforesend, etc handlers (if specified)\n\t */\n\tvar handlerDefined = false;\n\tif (config.handlers) {\n\t\tfor ( var handler in config.handlers) {\n\t\t\tif (config.handlers[handler]) {\n\t\t\t\thandlerDefined = true;\n\t\t\t\tajaxConfig[handler] = config.handlers[handler];\n\t\t\t}\n\t\t}\n\t}\n\tif (!handlerDefined && !callback)\n\t\treturn; // ok, we can query, but have no callbacks. just stop now\n\t\n\t// if only callback is passed as arg, add that on as 'onComplete' callback\n\tif (callback)\n\t\tajaxConfig.complete = callback;\n\n\t/**\n\t * add named graphs to ajax config\n\t */\n\tif (config.namedGraphs && config.namedGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"named-graph-uri\": \"using-named-graph-uri \");\n\t\tfor (var i = 0; i < config.namedGraphs.length; i++)\n\t\t\tajaxConfig.data.push({\n\t\t\t\tname : argName,\n\t\t\t\tvalue : config.namedGraphs[i]\n\t\t\t});\n\t}\n\t/**\n\t * add default graphs to ajax config\n\t */\n\tif (config.defaultGraphs && config.defaultGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"default-graph-uri\": \"using-graph-uri \");\n\t\tfor (var i = 0; i < config.defaultGraphs.length; i++)\n\t\t\tajaxConfig.data.push({\n\t\t\t\tname : argName,\n\t\t\t\tvalue : config.defaultGraphs[i]\n\t\t\t});\n\t}\n\n\t/**\n\t * merge additional request headers\n\t */\n\tif (config.headers && !$.isEmptyObject(config.headers))\n\t\t$.extend(ajaxConfig.headers, config.headers);\n\t/**\n\t * add additional request args\n\t */\n\tif (config.args && config.args.length > 0) $.merge(ajaxConfig.data, config.args);\n\troot.updateQueryButton(cm, \"busy\");\n\t\n\tvar updateQueryButton = function() {\n\t\troot.updateQueryButton(cm);\n\t};\n\t//Make sure the query button is updated again on complete\n\tif (ajaxConfig.complete) {\n\t\tvar customComplete = ajaxConfig.complete;\n\t\tajaxConfig.complete = function(arg1, arg2) {\n\t\t\tcustomComplete(arg1, arg2);\n\t\t\tupdateQueryButton();\n\t\t};\n\t} else {\n\t\tajaxConfig.complete = updateQueryButton;\n\t}\n\tcm.xhr = $.ajax(ajaxConfig);\n};\nvar completionNotifications = {};\n\n/**\n * Show notification\n * \n * @param doc {YASQE}\n * @param autocompletionType {string}\n * @method YASQE.showCompletionNotification\n */\nroot.showCompletionNotification = function(cm, type) {\n\t//only draw when the user needs to use a keypress to summon autocompletions\n\tif (!cm.options.autocompletions[type].autoshow) {\n\t\tif (!completionNotifications[type]) completionNotifications[type] = $(\"<div class='completionNotification'></div>\");\n\t\tcompletionNotifications[type]\n\t\t\t.show()\n\t\t\t.text(\"Press \" + (navigator.userAgent.indexOf('Mac OS X') != -1? \"CMD\": \"CTRL\") + \" - <spacebar> to autocomplete\")\n\t\t\t.appendTo($(cm.getWrapperElement()));\n\t}\n};\n\n/**\n * Hide completion notification\n * \n * @param doc {YASQE}\n * @param autocompletionType {string}\n * @method YASQE.hideCompletionNotification\n */\nroot.hideCompletionNotification = function(cm, type) {\n\tif (completionNotifications[type]) {\n\t\tcompletionNotifications[type].hide();\n\t}\n};\n\n\n\nroot.autoComplete = function(cm, fromAutoShow) {\n\tif (cm.somethingSelected())\n\t\treturn;\n\tif (!cm.options.autocompletions)\n\t\treturn;\n\tvar tryHintType = function(type) {\n\t\tif (fromAutoShow // from autoShow, i.e. this gets called each time the editor content changes\n\t\t\t\t&& (!cm.options.autocompletions[type].autoShow // autoshow for  this particular type of autocompletion is -not- enabled\n\t\t\t\t|| cm.options.autocompletions[type].async) // async is enabled (don't want to re-do ajax-like request for every editor change)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar hintConfig = {\n\t\t\tcloseCharacters : /(?=a)b/,\n\t\t\ttype : type,\n\t\t\tcompleteSingle: false\n\t\t};\n\t\tif (cm.options.autocompletions[type].async) {\n\t\t\thintConfig.async = true;\n\t\t}\n\t\tvar wrappedHintCallback = function(cm, callback) {\n\t\t\treturn getCompletionHintsObject(cm, type, callback);\n\t\t};\n\t\tvar result = root.showHint(cm, wrappedHintCallback, hintConfig);\n\t\treturn true;\n\t};\n\tfor ( var type in cm.options.autocompletions) {\n\t\tif (!cm.options.autocompletions[type].isValidCompletionPosition) continue; //no way to check whether we are in a valid position\n\t\t\n\t\tif (!cm.options.autocompletions[type].isValidCompletionPosition(cm)) {\n\t\t\t//if needed, fire handler for when we are -not- in valid completion position\n\t\t\tif (cm.options.autocompletions[type].handlers && cm.options.autocompletions[type].handlers.invalidPosition) {\n\t\t\t\tcm.options.autocompletions[type].handlers.invalidPosition(cm, type);\n\t\t\t}\n\t\t\t//not in a valid position, so continue to next completion candidate type\n\t\t\tcontinue;\n\t\t}\n\t\t// run valid position handler, if there is one (if it returns false, stop the autocompletion!)\n\t\tif (cm.options.autocompletions[type].handlers && cm.options.autocompletions[type].handlers.validPosition) {\n\t\t\tif (cm.options.autocompletions[type].handlers.validPosition(cm, type) === false)\n\t\t\t\tcontinue;\n\t\t}\n\n\t\tvar success = tryHintType(type);\n\t\tif (success)\n\t\t\tbreak;\n\t}\n};\n\n/**\n * Check whether typed prefix is declared. If not, automatically add declaration\n * using list from prefix.cc\n * \n * @param cm\n */\nroot.appendPrefixIfNeeded = function(cm) {\n\tif (!tries[\"prefixes\"])\n\t\treturn;// no prefixed defined. just stop\n\tvar cur = cm.getCursor();\n\n\tvar token = cm.getTokenAt(cur);\n\tif (tokenTypes[token.type] == \"prefixed\") {\n\t\tvar colonIndex = token.string.indexOf(\":\");\n\t\tif (colonIndex !== -1) {\n\t\t\t// check first token isnt PREFIX, and previous token isnt a '<'\n\t\t\t// (i.e. we are in a uri)\n\t\t\tvar firstTokenString = getNextNonWsToken(cm, cur.line).string\n\t\t\t\t\t.toUpperCase();\n\t\t\tvar previousToken = cm.getTokenAt({\n\t\t\t\tline : cur.line,\n\t\t\t\tch : token.start\n\t\t\t});// needs to be null (beginning of line), or whitespace\n\t\t\tif (firstTokenString != \"PREFIX\"\n\t\t\t\t\t&& (previousToken.type == \"ws\" || previousToken.type == null)) {\n\t\t\t\t// check whether it isnt defined already (saves us from looping\n\t\t\t\t// through the array)\n\t\t\t\tvar currentPrefix = token.string.substring(0, colonIndex + 1);\n\t\t\t\tvar queryPrefixes = getPrefixesFromQuery(cm);\n\t\t\t\tif (queryPrefixes[currentPrefix] == null) {\n\t\t\t\t\t// ok, so it isnt added yet!\n\t\t\t\t\tvar completions = tries[\"prefixes\"].autoComplete(currentPrefix);\n\t\t\t\t\tif (completions.length > 0) {\n\t\t\t\t\t\tappendToPrefixes(cm, completions[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\n/**\n * When typing a query, this query is sometimes syntactically invalid, causing\n * the current tokens to be incorrect This causes problem for autocompletion.\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\n * these\n * \n * @param yasqe {doc}\n * @param token {object}\n * @param cursor {object}\n * @return token {object}\n * @method YASQE.getCompleteToken\n */\nroot.getCompleteToken = function(cm, token, cur) {\n\tif (!cur) {\n\t\tcur = cm.getCursor();\n\t}\n\tif (!token) {\n\t\ttoken = cm.getTokenAt(cur);\n\t}\n\tvar prevToken = cm.getTokenAt({\n\t\tline : cur.line,\n\t\tch : token.start\n\t});\n\t// not start of line, and not whitespace\n\tif (\n\t\t\tprevToken.type != null && prevToken.type != \"ws\"\n\t\t\t&& token.type != null && token.type != \"ws\"\n\t\t) {\n\t\ttoken.start = prevToken.start;\n\t\ttoken.string = prevToken.string + token.string;\n\t\treturn root.getCompleteToken(cm, token, {\n\t\t\tline : cur.line,\n\t\t\tch : prevToken.start\n\t\t});// recursively, might have multiple tokens which it should include\n\t} else if (token.type != null && token.type == \"ws\") {\n\t\t//always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\n\t\ttoken.start = token.start + 1;\n\t\ttoken.string = token.string.substring(1);\n\t\treturn token;\n\t} else {\n\t\treturn token;\n\t}\n};\nfunction getPreviousNonWsToken(cm, line, token) {\n\tvar previousToken = cm.getTokenAt({\n\t\tline : line,\n\t\tch : token.start\n\t});\n\tif (previousToken != null && previousToken.type == \"ws\") {\n\t\tpreviousToken = getPreviousNonWsToken(cm, line, previousToken);\n\t}\n\treturn previousToken;\n}\n\n\n/**\n * Fetch property and class autocompletions the Linked Open Vocabulary services. Issues an async autocompletion call\n * \n * @param doc {YASQE}\n * @param partialToken {object}\n * @param type {\"properties\" | \"classes\"}\n * @param callback {function} \n * \n * @method YASQE.fetchFromLov\n */\nroot.fetchFromLov = function(cm, partialToken, type, callback) {\n\t\n\tif (!partialToken || !partialToken.string || partialToken.string.trim().length == 0) {\n\t\tif (completionNotifications[type]) {\n\t\t\tcompletionNotifications[type]\n\t\t\t\t.empty()\n\t\t\t\t.append(\"Nothing to autocomplete yet!\");\n\t\t}\n\t\treturn false;\n\t}\n\tvar maxResults = 50;\n\n\tvar args = {\n\t\tq : partialToken.uri,\n\t\tpage : 1\n\t};\n\tif (type == \"classes\") {\n\t\targs.type = \"class\";\n\t} else {\n\t\targs.type = \"property\";\n\t}\n\tvar results = [];\n\tvar url = \"\";\n\tvar updateUrl = function() {\n\t\turl = \"http://lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\"\n\t\t\t\t+ $.param(args);\n\t};\n\tupdateUrl();\n\tvar increasePage = function() {\n\t\targs.page++;\n\t\tupdateUrl();\n\t};\n\tvar doRequests = function() {\n\t\t$.get(\n\t\t\t\turl,\n\t\t\t\tfunction(data) {\n\t\t\t\t\tfor (var i = 0; i < data.results.length; i++) {\n\t\t\t\t\t\tif ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\n\t\t\t\t\t\t\tresults.push(data.results[i].uri[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresults.push(data.results[i].uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (results.length < data.total_results\n\t\t\t\t\t\t\t&& results.length < maxResults) {\n\t\t\t\t\t\tincreasePage();\n\t\t\t\t\t\tdoRequests();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//if notification bar is there, show feedback, or close\n\t\t\t\t\t\tif (completionNotifications[type]) {\n\t\t\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\t\t\tcompletionNotifications[type].hide();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcompletionNotifications[type].text(\"0 matches found...\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(results);\n\t\t\t\t\t\t// requests done! Don't call this function again\n\t\t\t\t\t}\n\t\t\t\t}).fail(function(jqXHR, textStatus, errorThrown) {\n\t\t\t\t\tif (completionNotifications[type]) {\n\t\t\t\t\t\tcompletionNotifications[type]\n\t\t\t\t\t\t\t.empty()\n\t\t\t\t\t\t\t.append(\"Failed fetching suggestions..\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t});\n\t};\n\t//if notification bar is there, show a loader\n\tif (completionNotifications[type]) {\n\t\tcompletionNotifications[type]\n\t\t.empty()\n\t\t.append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\n\t\t.append(require(\"yasgui-utils\").imgs.getElement({id: \"loader\", width: \"18px\", height: \"18px\"}).css(\"vertical-align\", \"middle\"));\n\t}\n\tdoRequests();\n};\n/**\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\n */\nvar selectHint = function(cm, data, completion) {\n\tif (completion.text != cm.getTokenAt(cm.getCursor()).string) {\n\t\tcm.replaceRange(completion.text, data.from, data.to);\n\t}\n};\n\n/**\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\n * Stores additional info such as the used namespace and prefix in the token object\n */\nvar preprocessResourceTokenForCompletion = function(cm, token) {\n\tvar queryPrefixes = getPrefixesFromQuery(cm);\n\tif (!token.string.indexOf(\"<\") == 0) {\n\t\ttoken.tokenPrefix = token.string.substring(0,\ttoken.string.indexOf(\":\") + 1);\n\n\t\tif (queryPrefixes[token.tokenPrefix] != null) {\n\t\t\ttoken.tokenPrefixUri = queryPrefixes[token.tokenPrefix];\n\t\t}\n\t}\n\n\ttoken.uri = token.string.trim();\n\tif (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\n\t\t// hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\n\t\tfor (var prefix in queryPrefixes) {\n\t\t\tif (queryPrefixes.hasOwnProperty(prefix)) {\n\t\t\t\tif (token.string.indexOf(prefix) == 0) {\n\t\t\t\t\ttoken.uri = queryPrefixes[prefix];\n\t\t\t\t\ttoken.uri += token.string.substring(prefix.length);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (token.uri.indexOf(\"<\") == 0)\ttoken.uri = token.uri.substring(1);\n\tif (token.uri.indexOf(\">\", token.length - 1) !== -1) token.uri = token.uri.substring(0,\ttoken.uri.length - 1);\n\treturn token;\n};\n\nvar postprocessResourceTokenForCompletion = function(cm, token, suggestedString) {\n\tif (token.tokenPrefix && token.uri && token.tokenPrefixUri) {\n\t\t// we need to get the suggested string back to prefixed form\n\t\tsuggestedString = suggestedString.substring(token.tokenPrefixUri.length);\n\t\tsuggestedString = token.tokenPrefix + suggestedString;\n\t} else {\n\t\t// it is a regular uri. add '<' and '>' to string\n\t\tsuggestedString = \"<\" + suggestedString + \">\";\n\t}\n\treturn suggestedString;\n};\nvar preprocessPrefixTokenForCompletion = function(cm, token) {\n\tvar previousToken = getPreviousNonWsToken(cm, cm.getCursor().line, token);\n\tif (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\n\t\t//combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\n\t\t//we want the token to be \"bla: <\", en not \"<\"\n\t\ttoken = {\n\t\t\tstart: previousToken.start,\n\t\t\tend: token.end,\n\t\t\tstring: previousToken.string + \" \" + token.string,\n\t\t\tstate: token.state\n\t\t};\n\t}\n\treturn token;\n};\nvar getSuggestionsFromToken = function(cm, type, partialToken) {\n\tvar suggestions = [];\n\tif (tries[type]) {\n\t\tsuggestions = tries[type].autoComplete(partialToken.string);\n\t} else if (typeof cm.options.autocompletions[type].get == \"function\" && cm.options.autocompletions[type].async == false) {\n\t\tsuggestions = cm.options.autocompletions[type].get(cm, partialToken.string, type);\n\t} else if (typeof cm.options.autocompletions[type].get == \"object\") {\n\t\tvar partialTokenLength = partialToken.string.length;\n\t\tfor (var i = 0; i < cm.options.autocompletions[type].get.length; i++) {\n\t\t\tvar completion = cm.options.autocompletions[type].get[i];\n\t\t\tif (completion.slice(0, partialTokenLength) == partialToken.string) {\n\t\t\t\tsuggestions.push(completion);\n\t\t\t}\n\t\t}\n\t}\n\treturn getSuggestionsAsHintObject(cm, suggestions, type, partialToken);\n\t\n};\n\n/**\n *  get our array of suggestions (strings) in the codemirror hint format\n */\nvar getSuggestionsAsHintObject = function(cm, suggestions, type, token) {\n\tvar hintList = [];\n\tfor (var i = 0; i < suggestions.length; i++) {\n\t\tvar suggestedString = suggestions[i];\n\t\tif (cm.options.autocompletions[type].postProcessToken) {\n\t\t\tsuggestedString = cm.options.autocompletions[type].postProcessToken(cm, token, suggestedString);\n\t\t}\n\t\thintList.push({\n\t\t\ttext : suggestedString,\n\t\t\tdisplayText : suggestedString,\n\t\t\thint : selectHint,\n\t\t\tclassName : type + \"Hint\"\n\t\t});\n\t}\n\t\n\tvar cur = cm.getCursor();\n\tvar returnObj = {\n\t\tcompletionToken : token.string,\n\t\tlist : hintList,\n\t\tfrom : {\n\t\t\tline : cur.line,\n\t\t\tch : token.start\n\t\t},\n\t\tto : {\n\t\t\tline : cur.line,\n\t\t\tch : token.end\n\t\t}\n\t};\n\t//if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\n\tif (cm.options.autocompletions[type].handlers) {\n\t\tfor ( var handler in cm.options.autocompletions[type].handlers) {\n\t\t\tif (cm.options.autocompletions[type].handlers[handler]) \n\t\t\t\troot.on(returnObj, handler, cm.options.autocompletions[type].handlers[handler]);\n\t\t}\n\t}\n\treturn returnObj;\n};\n\n\nvar getCompletionHintsObject = function(cm, type, callback) {\n\tvar token = root.getCompleteToken(cm);\n\tif (cm.options.autocompletions[type].preProcessToken) {\n\t\ttoken = cm.options.autocompletions[type].preProcessToken(cm, token, type);\n\t}\n\t\n\tif (token) {\n\t\t// use custom completionhint function, to avoid reaching a loop when the\n\t\t// completionhint is the same as the current token\n\t\t// regular behaviour would keep changing the codemirror dom, hence\n\t\t// constantly calling this callback\n\t\tif (cm.options.autocompletions[type].async) {\n\t\t\tvar wrappedCallback = function(suggestions) {\n\t\t\t\tcallback(getSuggestionsAsHintObject(cm, suggestions, type, token));\n\t\t\t};\n\t\t\tcm.options.autocompletions[type].get(cm, token, type, wrappedCallback);\n\t\t} else {\n\t\t\treturn getSuggestionsFromToken(cm, type, token);\n\n\t\t}\n\t}\n};\n\nvar getPersistencyId = function(cm, persistentIdCreator) {\n\tvar persistencyId = null;\n\n\tif (persistentIdCreator) {\n\t\tif (typeof persistentIdCreator == \"string\") {\n\t\t\tpersistencyId = persistentIdCreator;\n\t\t} else {\n\t\t\tpersistencyId = persistentIdCreator(cm);\n\t\t}\n\t}\n\treturn persistencyId;\n};\n\nvar autoFormatRange = function(cm, from, to) {\n\tvar absStart = cm.indexFromPos(from);\n\tvar absEnd = cm.indexFromPos(to);\n\t// Insert additional line breaks where necessary according to the\n\t// mode's syntax\n\tvar res = autoFormatLineBreaks(cm.getValue(), absStart, absEnd);\n\n\t// Replace and auto-indent the range\n\tcm.operation(function() {\n\t\tcm.replaceRange(res, from, to);\n\t\tvar startLine = cm.posFromIndex(absStart).line;\n\t\tvar endLine = cm.posFromIndex(absStart + res.length).line;\n\t\tfor (var i = startLine; i <= endLine; i++) {\n\t\t\tcm.indentLine(i, \"smart\");\n\t\t}\n\t});\n};\n\nvar autoFormatLineBreaks = function(text, start, end) {\n\ttext = text.substring(start, end);\n\tvar breakAfterArray = [ [ \"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\" ], // i.e. prefix declaration\n\t[ \"keyword\", \"ws\", \"uri\" ] // i.e. base\n\t];\n\tvar breakAfterCharacters = [ \"{\", \".\", \";\" ];\n\tvar breakBeforeCharacters = [ \"}\" ];\n\tvar getBreakType = function(stringVal, type) {\n\t\tfor (var i = 0; i < breakAfterArray.length; i++) {\n\t\t\tif (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf()\n\t\t\t\t\t.toString()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakAfterCharacters.length; i++) {\n\t\t\tif (stringVal == breakAfterCharacters[i]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakBeforeCharacters.length; i++) {\n\t\t\t// don't want to issue 'breakbefore' AND 'breakafter', so check\n\t\t\t// current line\n\t\t\tif ($.trim(currentLine) != ''\n\t\t\t\t\t&& stringVal == breakBeforeCharacters[i]) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t};\n\tvar formattedQuery = \"\";\n\tvar currentLine = \"\";\n\tvar stackTrace = [];\n\tCodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\n\t\tstackTrace.push(type);\n\t\tvar breakType = getBreakType(stringVal, type);\n\t\tif (breakType != 0) {\n\t\t\tif (breakType == 1) {\n\t\t\t\tformattedQuery += stringVal + \"\\n\";\n\t\t\t\tcurrentLine = \"\";\n\t\t\t} else {// (-1)\n\t\t\t\tformattedQuery += \"\\n\" + stringVal;\n\t\t\t\tcurrentLine = stringVal;\n\t\t\t}\n\t\t\tstackTrace = [];\n\t\t} else {\n\t\t\tcurrentLine += stringVal;\n\t\t\tformattedQuery += stringVal;\n\t\t}\n\t\tif (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\")\n\t\t\tstackTrace = [];\n\t});\n\treturn $.trim(formattedQuery.replace(/\\n\\s*\\n/g, '\\n'));\n};\n\n/**\n * The default options of YASQE (check the CodeMirror documentation for even\n * more options, such as disabling line numbers, or changing keyboard shortcut\n * keys). Either change the default options by setting YASQE.defaults, or by\n * passing your own options as second argument to the YASQE constructor\n * \n * @attribute\n * @attribute YASQE.defaults\n */\nroot.defaults = $.extend(root.defaults, {\n\tmode : \"sparql11\",\n\t/**\n\t * Query string\n\t * \n\t * @property value\n\t * @type String\n\t * @default \"SELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\"\n\t */\n\tvalue : \"SELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\n\thighlightSelectionMatches : {\n\t\tshowToken : /\\w/\n\t},\n\ttabMode : \"indent\",\n\tlineNumbers : true,\n\tgutters : [ \"gutterErrorBar\", \"CodeMirror-linenumbers\" ],\n\tmatchBrackets : true,\n\tfixedGutter : true,\n\tsyntaxErrorCheck: true,\n\t/**\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\n\t * \n\t * @property extraKeys\n\t * @type object\n\t */\n\textraKeys : {\n\t\t\"Ctrl-Space\" : root.autoComplete,\n\t\t\"Cmd-Space\" : root.autoComplete,\n\t\t\"Ctrl-D\" : root.deleteLine,\n\t\t\"Ctrl-K\" : root.deleteLine,\n\t\t\"Cmd-D\" : root.deleteLine,\n\t\t\"Cmd-K\" : root.deleteLine,\n\t\t\"Ctrl-/\" : root.commentLines,\n\t\t\"Cmd-/\" : root.commentLines,\n\t\t\"Ctrl-Alt-Down\" : root.copyLineDown,\n\t\t\"Ctrl-Alt-Up\" : root.copyLineUp,\n\t\t\"Cmd-Alt-Down\" : root.copyLineDown,\n\t\t\"Cmd-Alt-Up\" : root.copyLineUp,\n\t\t\"Shift-Ctrl-F\" : root.doAutoFormat,\n\t\t\"Shift-Cmd-F\" : root.doAutoFormat,\n\t\t\"Ctrl-]\" : root.indentMore,\n\t\t\"Cmd-]\" : root.indentMore,\n\t\t\"Ctrl-[\" : root.indentLess,\n\t\t\"Cmd-[\" : root.indentLess,\n\t\t\"Ctrl-S\" : root.storeQuery,\n\t\t\"Cmd-S\" : root.storeQuery,\n\t\t\"Ctrl-Enter\" : root.executeQuery,\n\t\t\"Cmd-Enter\" : root.executeQuery\n\t},\n\tcursorHeight : 0.9,\n\n\t// non CodeMirror options\n\n\t\n\t/**\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\n\t * \n\t * @property createShareLink\n\t * @type function\n\t * @default YASQE.createShareLink\n\t */\n\tcreateShareLink: root.createShareLink,\n\t\n\t/**\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\n\t * \n\t * @property consumeShareLink\n\t * @type function\n\t * @default YASQE.consumeShareLink\n\t */\n\tconsumeShareLink: root.consumeShareLink,\n\t\n\t\n\t\n\t\n\t/**\n\t * Change persistency settings for the YASQE query value. Setting the values\n\t * to null, will disable persistancy: nothing is stored between browser\n\t * sessions Setting the values to a string (or a function which returns a\n\t * string), will store the query in localstorage using the specified string.\n\t * By default, the ID is dynamically generated using the determineID\n\t * function, to avoid collissions when using multiple YASQE items on one\n\t * page\n\t * \n\t * @property persistent\n\t * @type function|string\n\t */\n\tpersistent : function(cm) {\n\t\treturn \"queryVal_\" + root.determineId(cm);\n\t},\n\n\t\n\t/**\n\t * Settings for querying sparql endpoints\n\t * \n\t * @property sparql\n\t * @type object\n\t */\n\tsparql : {\n\t\t/**\n\t\t * Show a query button. You don't like it? Then disable this setting, and create your button which calls the query() function of the yasqe document\n\t\t * \n\t\t * @property sparql.showQueryButton\n\t\t * @type boolean\n\t\t * @default false\n\t\t */\n\t\tshowQueryButton: false,\n\t\t\n\t\t/**f\n\t\t * Endpoint to query\n\t\t * \n\t\t * @property sparql.endpoint\n\t\t * @type String|function\n\t\t * @default \"http://dbpedia.org/sparql\"\n\t\t */\n\t\tendpoint : \"http://dbpedia.org/sparql\",\n\t\t/**\n\t\t * Request method via which to access SPARQL endpoint\n\t\t * \n\t\t * @property sparql.requestMethod\n\t\t * @type String|function\n\t\t * @default \"POST\"\n\t\t */\n\t\trequestMethod : \"POST\",\n\t\t/**\n\t\t * Query accept header\n\t\t * \n\t\t * @property sparql.acceptHeader\n\t\t * @type String|function\n\t\t * @default YASQE.getAcceptHeader\n\t\t */\n\t\tacceptHeader : root.getAcceptHeader,\n\t\t\n\t\t/**\n\t\t * Named graphs to query.\n\t\t * \n\t\t * @property sparql.namedGraphs\n\t\t * @type array\n\t\t * @default []\n\t\t */\n\t\tnamedGraphs : [],\n\t\t/**\n\t\t * Default graphs to query.\n\t\t * \n\t\t * @property sparql.defaultGraphs\n\t\t * @type array\n\t\t * @default []\n\t\t */\n\t\tdefaultGraphs : [],\n\n\t\t/**\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\n\t\t * \n\t\t * @property sparql.args\n\t\t * @type array\n\t\t * @default []\n\t\t */\n\t\targs : [],\n\n\t\t/**\n\t\t * Additional request headers\n\t\t * \n\t\t * @property sparql.headers\n\t\t * @type array\n\t\t * @default {}\n\t\t */\n\t\theaders : {},\n\n\t\t/**\n\t\t * Set of ajax handlers\n\t\t * \n\t\t * @property sparql.handlers\n\t\t * @type object\n\t\t */\n\t\thandlers : {\n\t\t\t/**\n\t\t\t * See https://api.jquery.com/jQuery.ajax/ for more information on\n\t\t\t * these handlers, and their arguments.\n\t\t\t * \n\t\t\t * @property sparql.handlers.beforeSend\n\t\t\t * @type function\n\t\t\t * @default null\n\t\t\t */\n\t\t\tbeforeSend : null,\n\t\t\t/**\n\t\t\t * See https://api.jquery.com/jQuery.ajax/ for more information on\n\t\t\t * these handlers, and their arguments.\n\t\t\t * \n\t\t\t * @property sparql.handlers.complete\n\t\t\t * @type function\n\t\t\t * @default null\n\t\t\t */\n\t\t\tcomplete : null,\n\t\t\t/**\n\t\t\t * See https://api.jquery.com/jQuery.ajax/ for more information on\n\t\t\t * these handlers, and their arguments.\n\t\t\t * \n\t\t\t * @property sparql.handlers.error\n\t\t\t * @type function\n\t\t\t * @default null\n\t\t\t */\n\t\t\terror : null,\n\t\t\t/**\n\t\t\t * See https://api.jquery.com/jQuery.ajax/ for more information on\n\t\t\t * these handlers, and their arguments.\n\t\t\t * \n\t\t\t * @property sparql.handlers.success\n\t\t\t * @type function\n\t\t\t * @default null\n\t\t\t */\n\t\t\tsuccess : null\n\t\t}\n\t},\n\t/**\n\t * Types of completions. Setting the value to null, will disable\n\t * autocompletion for this particular type. By default, only prefix\n\t * autocompletions are fetched from prefix.cc, and property and class\n\t * autocompletions are fetched from the Linked Open Vocabularies API\n\t * \n\t * @property autocompletions\n\t * @type object\n\t */\n\tautocompletions : {\n\t\t/**\n\t\t * Prefix autocompletion settings\n\t\t * \n\t\t * @property autocompletions.prefixes\n\t\t * @type object\n\t\t */\n\t\tprefixes : {\n\t\t\t/**\n\t\t\t * Check whether the cursor is in a proper position for this autocompletion.\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.isValidCompletionPosition\n\t\t\t * @type function\n\t\t\t * @param yasqe doc\n\t\t\t * @return boolean\n\t\t\t */\n\t\t\tisValidCompletionPosition : function(cm) {\n\t\t\t\tvar cur = cm.getCursor(), token = cm.getTokenAt(cur);\n\n\t\t\t\t// not at end of line\n\t\t\t\tif (cm.getLine(cur.line).length > cur.ch)\n\t\t\t\t\treturn false;\n\n\t\t\t\tif (token.type != \"ws\") {\n\t\t\t\t\t// we want to complete token, e.g. when the prefix starts with an a\n\t\t\t\t\t// (treated as a token in itself..)\n\t\t\t\t\t// but we to avoid including the PREFIX tag. So when we have just\n\t\t\t\t\t// typed a space after the prefix tag, don't get the complete token\n\t\t\t\t\ttoken = root.getCompleteToken(cm);\n\t\t\t\t}\n\n\t\t\t\t// we shouldnt be at the uri part the prefix declaration\n\t\t\t\t// also check whether current token isnt 'a' (that makes codemirror\n\t\t\t\t// thing a namespace is a possiblecurrent\n\t\t\t\tif (!token.string.indexOf(\"a\") == 0\n\t\t\t\t\t\t&& $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1)\n\t\t\t\t\treturn false;\n\n\t\t\t\t// First token of line needs to be PREFIX,\n\t\t\t\t// there should be no trailing text (otherwise, text is wrongly inserted\n\t\t\t\t// in between)\n\t\t\t\tvar firstToken = getNextNonWsToken(cm, cur.line);\n\t\t\t\tif (firstToken == null || firstToken.string.toUpperCase() != \"PREFIX\")\n\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t    \n\t\t\t/**\n\t\t\t * Get the autocompletions. Either a function which returns an\n\t\t\t * array, or an actual array. The array should be in the form [\"rdf: <http://....>\"]\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.get\n\t\t\t * @type function|array\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object|string} When bulk is disabled, use this token to autocomplete\n\t\t\t * @param completionType {string} what type of autocompletion we try to attempt. Classes, properties, or prefixes)\n\t\t\t * @param callback {function} In case async is enabled, use this callback\n\t\t\t * @default function (YASQE.fetchFromPrefixCc)\n\t\t\t */\n\t\t\tget : root.fetchFromPrefixCc,\n\t\t\t\n\t\t\t/**\n\t\t\t * Preprocesses the codemirror token before matching it with our autocompletions list.\n\t\t\t * Use this for e.g. autocompleting prefixed resources when your autocompletion list contains only full-length URIs\n\t\t\t * I.e., foaf:name -> http://xmlns.com/foaf/0.1/name\n\t\t\t * \n\t\t\t * @property autocompletions.properties.preProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @return token {object} Return the same token (possibly with more data added to it, which you can use in the postProcessing step)\n\t\t\t * @default function\n\t\t\t */\n\t\t\tpreProcessToken: preprocessPrefixTokenForCompletion,\n\t\t\t/**\n\t\t\t * Postprocesses the autocompletion suggestion.\n\t\t\t * Use this for e.g. returning a prefixed URI based on a full-length URI suggestion\n\t\t\t * I.e., http://xmlns.com/foaf/0.1/name -> foaf:name\n\t\t\t * \n\t\t\t * @property autocompletions.properties.postProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @param suggestion {string} The suggestion which you are post processing\n\t\t\t * @return post-processed suggestion {string}\n\t\t\t * @default null\n\t\t\t */\n\t\t\tpostProcessToken: null,\n\t\t\t\n\t\t\t/**\n\t\t\t * The get function is asynchronous\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.async\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tasync : false,\n\t\t\t/**\n\t\t\t * Use bulk loading of prefixes: all prefixes are retrieved onLoad\n\t\t\t * using the get() function. Alternatively, disable bulk loading, to\n\t\t\t * call the get() function whenever a token needs autocompletion (in\n\t\t\t * this case, the completion token is passed on to the get()\n\t\t\t * function) whenever you have an autocompletion list that is static, and that easily\n\t\t\t * fits in memory, we advice you to enable bulk for performance\n\t\t\t * reasons (especially as we store the autocompletions in a trie)\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.bulk\n\t\t\t * @type boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tbulk : true,\n\t\t\t/**\n\t\t\t * Auto-show the autocompletion dialog. Disabling this requires the\n\t\t\t * user to press [ctrl|cmd]-space to summon the dialog. Note: this\n\t\t\t * only works when completions are not fetched asynchronously\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.autoShow\n\t\t\t * @type boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tautoShow : true,\n\t\t\t/**\n\t\t\t * Auto-add prefix declaration: when prefixes are loaded in memory\n\t\t\t * (bulk: true), and the user types e.g. 'rdf:' in a triple pattern,\n\t\t\t * the editor automatically add this particular PREFIX definition to\n\t\t\t * the query\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.autoAddDeclaration\n\t\t\t * @type boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tautoAddDeclaration : true,\n\t\t\t/**\n\t\t\t * Automatically store autocompletions in localstorage. This is\n\t\t\t * particularly useful when the get() function is an expensive ajax\n\t\t\t * call. Autocompletions are stored for a period of a month. Set\n\t\t\t * this property to null (or remove it), to disable the use of\n\t\t\t * localstorage. Otherwise, set a string value (or a function\n\t\t\t * returning a string val), returning the key in which to store the\n\t\t\t * data Note: this feature only works combined with completions\n\t\t\t * loaded in memory (i.e. bulk: true)\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.persistent\n\t\t\t * @type string|function\n\t\t\t * @default \"prefixes\"\n\t\t\t */\n\t\t\tpersistent : \"prefixes\",\n\t\t\t/**\n\t\t\t * A set of handlers. Most, taken from the CodeMirror showhint\n\t\t\t * plugin: http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t * \n\t\t\t * @property autocompletions.prefixes.handlers\n\t\t\t * @type object\n\t\t\t */\n\t\t\thandlers : {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.validPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tvalidPosition : null,\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can -not- show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.invalidPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tinvalidPosition : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.showHint\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tshown : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.select\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tselect : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.pick\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tpick : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.close\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tclose : null,\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Property autocompletion settings\n\t\t * \n\t\t * @property autocompletions.properties\n\t\t * @type object\n\t\t */\n\t\tproperties : {\n\t\t\t/**\n\t\t\t * Check whether the cursor is in a proper position for this autocompletion.\n\t\t\t * \n\t\t\t * @property autocompletions.properties.isValidCompletionPosition\n\t\t\t * @type function\n\t\t\t * @param yasqe doc\n\t\t\t * @return boolean\n\t\t\t */\n\t\t\tisValidCompletionPosition : function(cm) {\n\t\t\t\t\n\t\t\t\tvar token = root.getCompleteToken(cm);\n\t\t\t\tif (token.string.length == 0) \n\t\t\t\t\treturn false; //we want -something- to autocomplete\n\t\t\t\tif (token.string.indexOf(\"?\") == 0)\n\t\t\t\t\treturn false; // we are typing a var\n\t\t\t\tif ($.inArray(\"a\", token.state.possibleCurrent) >= 0)\n\t\t\t\t\treturn true;// predicate pos\n\t\t\t\tvar cur = cm.getCursor();\n\t\t\t\tvar previousToken = getPreviousNonWsToken(cm, cur.line, token);\n\t\t\t\tif (previousToken.string == \"rdfs:subPropertyOf\")\n\t\t\t\t\treturn true;\n\n\t\t\t\t// hmm, we would like -better- checks here, e.g. checking whether we are\n\t\t\t\t// in a subject, and whether next item is a rdfs:subpropertyof.\n\t\t\t\t// difficult though... the grammar we use is unreliable when the query\n\t\t\t\t// is invalid (i.e. during typing), and often the predicate is not typed\n\t\t\t\t// yet, when we are busy writing the subject...\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Get the autocompletions. Either a function which returns an\n\t\t\t * array, or an actual array. The array should be in the form [\"http://...\",....]\n\t\t\t * \n\t\t\t * @property autocompletions.properties.get\n\t\t\t * @type function|array\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object|string} When bulk is disabled, use this token to autocomplete\n\t\t\t * @param completionType {string} what type of autocompletion we try to attempt. Classes, properties, or prefixes)\n\t\t\t * @param callback {function} In case async is enabled, use this callback\n\t\t\t * @default function (YASQE.fetchFromLov)\n\t\t\t */\n\t\t\tget : root.fetchFromLov,\n\t\t\t/**\n\t\t\t * Preprocesses the codemirror token before matching it with our autocompletions list.\n\t\t\t * Use this for e.g. autocompleting prefixed resources when your autocompletion list contains only full-length URIs\n\t\t\t * I.e., foaf:name -> http://xmlns.com/foaf/0.1/name\n\t\t\t * \n\t\t\t * @property autocompletions.properties.preProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @return token {object} Return the same token (possibly with more data added to it, which you can use in the postProcessing step)\n\t\t\t * @default function\n\t\t\t */\n\t\t\tpreProcessToken: preprocessResourceTokenForCompletion,\n\t\t\t/**\n\t\t\t * Postprocesses the autocompletion suggestion.\n\t\t\t * Use this for e.g. returning a prefixed URI based on a full-length URI suggestion\n\t\t\t * I.e., http://xmlns.com/foaf/0.1/name -> foaf:name\n\t\t\t * \n\t\t\t * @property autocompletions.properties.postProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @param suggestion {string} The suggestion which you are post processing\n\t\t\t * @return post-processed suggestion {string}\n\t\t\t * @default function\n\t\t\t */\n\t\t\tpostProcessToken: postprocessResourceTokenForCompletion,\n\n\t\t\t/**\n\t\t\t * The get function is asynchronous\n\t\t\t * \n\t\t\t * @property autocompletions.properties.async\n\t\t\t * @type boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tasync : true,\n\t\t\t/**\n\t\t\t * Use bulk loading of properties: all properties are retrieved\n\t\t\t * onLoad using the get() function. Alternatively, disable bulk\n\t\t\t * loading, to call the get() function whenever a token needs\n\t\t\t * autocompletion (in this case, the completion token is passed on\n\t\t\t * to the get() function) whenever you have an autocompletion list that is static, and \n\t\t\t * that easily fits in memory, we advice you to enable bulk for\n\t\t\t * performance reasons (especially as we store the autocompletions\n\t\t\t * in a trie)\n\t\t\t * \n\t\t\t * @property autocompletions.properties.bulk\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tbulk : false,\n\t\t\t/**\n\t\t\t * Auto-show the autocompletion dialog. Disabling this requires the\n\t\t\t * user to press [ctrl|cmd]-space to summon the dialog. Note: this\n\t\t\t * only works when completions are not fetched asynchronously\n\t\t\t * \n\t\t\t * @property autocompletions.properties.autoShow\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tautoShow : false,\n\t\t\t/**\n\t\t\t * Automatically store autocompletions in localstorage. This is\n\t\t\t * particularly useful when the get() function is an expensive ajax\n\t\t\t * call. Autocompletions are stored for a period of a month. Set\n\t\t\t * this property to null (or remove it), to disable the use of\n\t\t\t * localstorage. Otherwise, set a string value (or a function\n\t\t\t * returning a string val), returning the key in which to store the\n\t\t\t * data Note: this feature only works combined with completions\n\t\t\t * loaded in memory (i.e. bulk: true)\n\t\t\t * \n\t\t\t * @property autocompletions.properties.persistent\n\t\t\t * @type string|function\n\t\t\t * @default \"properties\"\n\t\t\t */\n\t\t\tpersistent : \"properties\",\n\t\t\t/**\n\t\t\t * A set of handlers. Most, taken from the CodeMirror showhint\n\t\t\t * plugin: http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t * \n\t\t\t * @property autocompletions.properties.handlers\n\t\t\t * @type object\n\t\t\t */\n\t\t\thandlers : {\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.properties.handlers.validPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default YASQE.showCompletionNotification\n\t\t\t\t */\n\t\t\t\tvalidPosition : root.showCompletionNotification,\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can -not- show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.properties.handlers.invalidPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default YASQE.hideCompletionNotification\n\t\t\t\t */\n\t\t\t\tinvalidPosition : root.hideCompletionNotification,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.properties.handlers.shown\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tshown : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.select\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tselect : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.properties.handlers.pick\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tpick : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.properties.handlers.close\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tclose : null,\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Class autocompletion settings\n\t\t * \n\t\t * @property autocompletions.classes\n\t\t * @type object\n\t\t */\n\t\tclasses : {\n\t\t\t/**\n\t\t\t * Check whether the cursor is in a proper position for this autocompletion.\n\t\t\t * \n\t\t\t * @property autocompletions.classes.isValidCompletionPosition\n\t\t\t * @type function\n\t\t\t * @param yasqe doc\n\t\t\t * @return boolean\n\t\t\t */\n\t\t\tisValidCompletionPosition : function(cm) {\n\t\t\t\tvar token = root.getCompleteToken(cm);\n\t\t\t\tif (token.string.indexOf(\"?\") == 0)\n\t\t\t\t\treturn false;\n\t\t\t\tvar cur = cm.getCursor();\n\t\t\t\tvar previousToken = getPreviousNonWsToken(cm, cur.line, token);\n\t\t\t\tif (previousToken.string == \"a\")\n\t\t\t\t\treturn true;\n\t\t\t\tif (previousToken.string == \"rdf:type\")\n\t\t\t\t\treturn true;\n\t\t\t\tif (previousToken.string == \"rdfs:domain\")\n\t\t\t\t\treturn true;\n\t\t\t\tif (previousToken.string == \"rdfs:range\")\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Get the autocompletions. Either a function which returns an\n\t\t\t * array, or an actual array. The array should be in the form [\"http://...\",....]\n\t\t\t * \n\t\t\t * @property autocompletions.classes.get\n\t\t\t * @type function|array\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object|string} When bulk is disabled, use this token to autocomplete\n\t\t\t * @param completionType {string} what type of autocompletion we try to attempt. Classes, properties, or prefixes)\n\t\t\t * @param callback {function} In case async is enabled, use this callback\n\t\t\t * @default function (YASQE.fetchFromLov)\n\t\t\t */\n\t\t\tget : root.fetchFromLov,\n\t\t\t\n\t\t\t/**\n\t\t\t * Preprocesses the codemirror token before matching it with our autocompletions list.\n\t\t\t * Use this for e.g. autocompleting prefixed resources when your autocompletion list contains only full-length URIs\n\t\t\t * I.e., foaf:name -> http://xmlns.com/foaf/0.1/name\n\t\t\t * \n\t\t\t * @property autocompletions.properties.preProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @return token {object} Return the same token (possibly with more data added to it, which you can use in the postProcessing step)\n\t\t\t * @default function\n\t\t\t */\n\t\t\tpreProcessToken: preprocessResourceTokenForCompletion,\n\t\t\t/**\n\t\t\t * Postprocesses the autocompletion suggestion.\n\t\t\t * Use this for e.g. returning a prefixed URI based on a full-length URI suggestion\n\t\t\t * I.e., http://xmlns.com/foaf/0.1/name -> foaf:name\n\t\t\t * \n\t\t\t * @property autocompletions.properties.postProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @param suggestion {string} The suggestion which you are post processing\n\t\t\t * @return post-processed suggestion {string}\n\t\t\t * @default function\n\t\t\t */\n\t\t\tpostProcessToken: postprocessResourceTokenForCompletion,\n\t\t\t/**\n\t\t\t * The get function is asynchronous\n\t\t\t * \n\t\t\t * @property autocompletions.classes.async\n\t\t\t * @type boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tasync : true,\n\t\t\t/**\n\t\t\t * Use bulk loading of classes: all classes are retrieved onLoad\n\t\t\t * using the get() function. Alternatively, disable bulk loading, to\n\t\t\t * call the get() function whenever a token needs autocompletion (in\n\t\t\t * this case, the completion token is passed on to the get()\n\t\t\t * function) whenever you have an autocompletion list that is static, and that easily\n\t\t\t * fits in memory, we advice you to enable bulk for performance\n\t\t\t * reasons (especially as we store the autocompletions in a trie)\n\t\t\t * \n\t\t\t * @property autocompletions.classes.bulk\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tbulk : false,\n\t\t\t/**\n\t\t\t * Auto-show the autocompletion dialog. Disabling this requires the\n\t\t\t * user to press [ctrl|cmd]-space to summon the dialog. Note: this\n\t\t\t * only works when completions are not fetched asynchronously\n\t\t\t * \n\t\t\t * @property autocompletions.classes.autoShow\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tautoShow : false,\n\t\t\t/**\n\t\t\t * Automatically store autocompletions in localstorage (only works when 'bulk' is set to true)\n\t\t\t * This is particularly useful when the get() function is an expensive ajax\n\t\t\t * call. Autocompletions are stored for a period of a month. Set\n\t\t\t * this property to null (or remove it), to disable the use of\n\t\t\t * localstorage. Otherwise, set a string value (or a function\n\t\t\t * returning a string val), returning the key in which to store the\n\t\t\t * data Note: this feature only works combined with completions\n\t\t\t * loaded in memory (i.e. bulk: true)\n\t\t\t * \n\t\t\t * @property autocompletions.classes.persistent\n\t\t\t * @type string|function\n\t\t\t * @default \"classes\"\n\t\t\t */\n\t\t\tpersistent : \"classes\",\n\t\t\t/**\n\t\t\t * A set of handlers. Most, taken from the CodeMirror showhint\n\t\t\t * plugin: http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t * \n\t\t\t * @property autocompletions.classes.handlers\n\t\t\t * @type object\n\t\t\t */\n\t\t\thandlers : {\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.validPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default YASQE.showCompletionNotification\n\t\t\t\t */\n\t\t\t\tvalidPosition : root.showCompletionNotification,\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can -not- show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.invalidPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default YASQE.hideCompletionNotification\n\t\t\t\t */\n\t\t\t\tinvalidPosition : root.hideCompletionNotification,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.shown\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tshown : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.select\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tselect : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.pick\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tpick : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.classes.handlers.close\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tclose : null,\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Variable names autocompletion settings\n\t\t * \n\t\t * @property autocompletions.properties\n\t\t * @type object\n\t\t */\n\t\tvariableNames : {\n\t\t\t/**\n\t\t\t * Check whether the cursor is in a proper position for this autocompletion.\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.isValidCompletionPosition\n\t\t\t * @type function\n\t\t\t * @param yasqe {doc}\n\t\t\t * @return boolean\n\t\t\t */\n\t\t\tisValidCompletionPosition : function(cm) {\n\t\t\t\tvar token = cm.getTokenAt(cm.getCursor());\n\t\t\t\tif (token.type != \"ws\") {\n\t\t\t\t\ttoken = root.getCompleteToken(cm, token);\n\t\t\t\t\tif (token && token.string.indexOf(\"?\") == 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Get the autocompletions. Either a function which returns an\n\t\t\t * array, or an actual array. The array should be in the form [\"http://...\",....]\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.get\n\t\t\t * @type function|array\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object|string} When bulk is disabled, use this token to autocomplete\n\t\t\t * @param completionType {string} what type of autocompletion we try to attempt. Classes, properties, or prefixes)\n\t\t\t * @param callback {function} In case async is enabled, use this callback\n\t\t\t * @default function (YASQE.autocompleteVariables)\n\t\t\t */\n\t\t\tget : root.autocompleteVariables,\n\t\t\t\t\t\t\n\t\t\t/**\n\t\t\t * Preprocesses the codemirror token before matching it with our autocompletions list.\n\t\t\t * Use this for e.g. autocompleting prefixed resources when your autocompletion list contains only full-length URIs\n\t\t\t * I.e., foaf:name -> http://xmlns.com/foaf/0.1/name\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.preProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @return token {object} Return the same token (possibly with more data added to it, which you can use in the postProcessing step)\n\t\t\t * @default null\n\t\t\t */\n\t\t\tpreProcessToken: null,\n\t\t\t/**\n\t\t\t * Postprocesses the autocompletion suggestion.\n\t\t\t * Use this for e.g. returning a prefixed URI based on a full-length URI suggestion\n\t\t\t * I.e., http://xmlns.com/foaf/0.1/name -> foaf:name\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.postProcessToken\n\t\t\t * @type function\n\t\t\t * @param doc {YASQE}\n\t\t\t * @param token {object} The CodeMirror token, including the position of this token in the query, as well as the actual string\n\t\t\t * @param suggestion {string} The suggestion which you are post processing\n\t\t\t * @return post-processed suggestion {string}\n\t\t\t * @default null\n\t\t\t */\n\t\t\tpostProcessToken: null,\n\t\t\t/**\n\t\t\t * The get function is asynchronous\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.async\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tasync : false,\n\t\t\t/**\n\t\t\t * Use bulk loading of variableNames: all variable names are retrieved\n\t\t\t * onLoad using the get() function. Alternatively, disable bulk\n\t\t\t * loading, to call the get() function whenever a token needs\n\t\t\t * autocompletion (in this case, the completion token is passed on\n\t\t\t * to the get() function) whenever you have an autocompletion list that is static, and \n\t\t\t * that easily fits in memory, we advice you to enable bulk for\n\t\t\t * performance reasons (especially as we store the autocompletions\n\t\t\t * in a trie)\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.bulk\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tbulk : false,\n\t\t\t/**\n\t\t\t * Auto-show the autocompletion dialog. Disabling this requires the\n\t\t\t * user to press [ctrl|cmd]-space to summon the dialog. Note: this\n\t\t\t * only works when completions are not fetched asynchronously\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.autoShow\n\t\t\t * @type boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tautoShow : true,\n\t\t\t/**\n\t\t\t * Automatically store autocompletions in localstorage. This is\n\t\t\t * particularly useful when the get() function is an expensive ajax\n\t\t\t * call. Autocompletions are stored for a period of a month. Set\n\t\t\t * this property to null (or remove it), to disable the use of\n\t\t\t * localstorage. Otherwise, set a string value (or a function\n\t\t\t * returning a string val), returning the key in which to store the\n\t\t\t * data Note: this feature only works combined with completions\n\t\t\t * loaded in memory (i.e. bulk: true)\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.persistent\n\t\t\t * @type string|function\n\t\t\t * @default null\n\t\t\t */\n\t\t\tpersistent : null,\n\t\t\t/**\n\t\t\t * A set of handlers. Most, taken from the CodeMirror showhint\n\t\t\t * plugin: http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t * \n\t\t\t * @property autocompletions.variableNames.handlers\n\t\t\t * @type object\n\t\t\t */\n\t\t\thandlers : {\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.variableNames.handlers.validPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tvalidPosition : null,\n\t\t\t\t/**\n\t\t\t\t * Fires when a codemirror change occurs in a position where we\n\t\t\t\t * can -not- show this particular type of autocompletion\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.variableNames.handlers.invalidPosition\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tinvalidPosition : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.variableNames.handlers.shown\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tshown : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.variableNames.handlers.select\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tselect : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.variableNames.handlers.pick\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tpick : null,\n\t\t\t\t/**\n\t\t\t\t * See http://codemirror.net/doc/manual.html#addon_show-hint\n\t\t\t\t * \n\t\t\t\t * @property autocompletions.variableNames.handlers.close\n\t\t\t\t * @type function\n\t\t\t\t * @default null\n\t\t\t\t */\n\t\t\t\tclose : null,\n\t\t\t}\n\t\t},\n\t}\n});\nroot.version = {\n\t\"CodeMirror\" : CodeMirror.version,\n\t\"YASQE\" : require(\"../package.json\").version,\n\t\"jquery\": $.fn.jquery,\n\t\"yasgui-utils\": require(\"yasgui-utils\").version\n};\n\n// end with some documentation stuff we'd like to include in the documentation\n// (yes, ugly, but easier than messing about and adding it manually to the\n// generated html ;))\n/**\n * Set query value in editor (see http://codemirror.net/doc/manual.html#setValue)\n * \n * @method doc.setValue\n * @param query {string}\n */\n\n/**\n * Get query value from editor (see http://codemirror.net/doc/manual.html#getValue)\n * \n * @method doc.getValue\n * @return query {string}\n */\n\n/**\n * Set size. Use null value to leave width or height unchanged. To resize the editor to fit its content, see http://codemirror.net/demo/resize.html\n * \n * @param width {number|string}\n * @param height {number|string}\n * @method doc.setSize\n */\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "(function (global){\n/*\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\n  http://benalman.com/projects/jquery-bbq-plugin/\n*/\nvar $ = (typeof window !== \"undefined\" ? window.jQuery : typeof global !== \"undefined\" ? global.jQuery : null);\n$.deparam = function (params, coerce) {\nvar obj = {},\n\tcoerce_types = { 'true': !0, 'false': !1, 'null': null };\n  \n// Iterate over all name=value pairs.\n$.each(params.replace(/\\+/g, ' ').split('&'), function (j,v) {\n  var param = v.split('='),\n\t  key = decodeURIComponent(param[0]),\n\t  val,\n\t  cur = obj,\n\t  i = 0,\n\t\t\n\t  // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n\t  // into its component parts.\n\t  keys = key.split(']['),\n\t  keys_last = keys.length - 1;\n\t\n  // If the first keys part contains [ and the last ends with ], then []\n  // are correctly balanced.\n  if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\n\t// Remove the trailing ] from the last keys part.\n\tkeys[keys_last] = keys[keys_last].replace(/\\]$/, '');\n\t  \n\t// Split first keys part into two parts on the [ and add them back onto\n\t// the beginning of the keys array.\n\tkeys = keys.shift().split('[').concat(keys);\n\t  \n\tkeys_last = keys.length - 1;\n  } else {\n\t// Basic 'foo' style key.\n\tkeys_last = 0;\n  }\n\t\n  // Are we dealing with a name=value pair, or just a name?\n  if (param.length === 2) {\n\tval = decodeURIComponent(param[1]);\n\t  \n\t// Coerce values.\n\tif (coerce) {\n\t  val = val && !isNaN(val)              ? +val              // number\n\t\t  : val === 'undefined'             ? undefined         // undefined\n\t\t  : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null\n\t\t  : val;                                                // string\n\t}\n\t  \n\tif ( keys_last ) {\n\t  // Complex key, build deep object structure based on a few rules:\n\t  // * The 'cur' pointer starts at the object top-level.\n\t  // * [] = array push (n is set to array length), [n] = array if n is \n\t  //   numeric, otherwise object.\n\t  // * If at the last keys part, set the value.\n\t  // * For each keys part, if the current level is undefined create an\n\t  //   object or array based on the type of the next keys part.\n\t  // * Move the 'cur' pointer to the next level.\n\t  // * Rinse & repeat.\n\t  for (; i <= keys_last; i++) {\n\t\tkey = keys[i] === '' ? cur.length : keys[i];\n\t\tcur = cur[key] = i < keys_last\n\t\t  ? cur[key] || (keys[i+1] && isNaN(keys[i+1]) ? {} : [])\n\t\t  : val;\n\t  }\n\t\t\n\t} else {\n\t  // Simple key, even simpler rules, since only scalars and shallow\n\t  // arrays are allowed.\n\t\t\n\t  if ($.isArray(obj[key])) {\n\t\t// val is already an array, so push on the next value.\n\t\tobj[key].push( val );\n\t\t  \n\t  } else if (obj[key] !== undefined) {\n\t\t// val isn't an array, but since a second value has been specified,\n\t\t// convert val into an array.\n\t\tobj[key] = [obj[key], val];\n\t\t  \n\t  } else {\n\t\t// val is a scalar.\n\t\tobj[key] = val;\n\t  }\n\t}\n\t  \n  } else if (key) {\n\t// No value was defined, so set something meaningful.\n\tobj[key] = coerce\n\t  ? undefined\n\t  : '';\n  }\n});\n  \nreturn obj;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "(function (global){\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((typeof window !== \"undefined\" ? window.CodeMirror : typeof global !== \"undefined\" ? global.CodeMirror : null));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  \n\tCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\n\t\n\t\tvar indentUnit = config.indentUnit;\n\t\n\t\t// ll1_table is auto-generated from grammar\n\t\t// - do not edit manually\n\t\t// %%%table%%%\n\tvar ll1_table=\n\t{\n\t  \"*[&&,valueLogical]\" : {\n\t     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \";\": []}, \n\t  \"*[,,expression]\" : {\n\t     \",\": [\"[,,expression]\",\"*[,,expression]\"], \n\t     \")\": []}, \n\t  \"*[,,objectPath]\" : {\n\t     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \n\t     \".\": [], \n\t     \";\": [], \n\t     \"]\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"*[,,object]\" : {\n\t     \",\": [\"[,,object]\",\"*[,,object]\"], \n\t     \".\": [], \n\t     \";\": [], \n\t     \"]\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"*[/,pathEltOrInverse]\" : {\n\t     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \n\t     \"|\": [], \n\t     \")\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n\t     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"*[;,?[verb,objectList]]\" : {\n\t     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"*[UNION,groupGraphPattern]\" : {\n\t     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \".\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\n\t     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"}\": []}, \n\t  \"*[quadsNotTriples,?.,?triplesTemplate]\" : {\n\t     \"GRAPH\": [\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"}\": []}, \n\t  \"*[|,pathOneInPropertySet]\" : {\n\t     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \n\t     \")\": []}, \n\t  \"*[|,pathSequence]\" : {\n\t     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \n\t     \")\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"*[||,conditionalAndExpression]\" : {\n\t     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \";\": []}, \n\t  \"*dataBlockValue\" : {\n\t     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n\t     \"}\": [], \n\t     \")\": []}, \n\t  \"*datasetClause\" : {\n\t     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \n\t     \"WHERE\": [], \n\t     \"{\": []}, \n\t  \"*describeDatasetClause\" : {\n\t     \"FROM\": [\"describeDatasetClause\",\"*describeDatasetClause\"], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"GROUP\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"WHERE\": [], \n\t     \"{\": [], \n\t     \"VALUES\": [], \n\t     \"$\": []}, \n\t  \"*graphNode\" : {\n\t     \"(\": [\"graphNode\",\"*graphNode\"], \n\t     \"[\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n\t     \"NIL\": [\"graphNode\",\"*graphNode\"], \n\t     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n\t     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n\t     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n\t     \"ANON\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \")\": []}, \n\t  \"*graphNodePath\" : {\n\t     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \")\": []}, \n\t  \"*groupCondition\" : {\n\t     \"(\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"*havingCondition\" : {\n\t     \"(\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\n\t     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n\t     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n\t     \"}\": []}, \n\t  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\n\t     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \";\": []}, \n\t  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n\t     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \";\": []}, \n\t  \"*or([var,[ (,expression,AS,var,)]])\" : {\n\t     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"WHERE\": [], \n\t     \"{\": [], \n\t     \"FROM\": []}, \n\t  \"*orderCondition\" : {\n\t     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"(\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"*prefixDecl\" : {\n\t     \"PREFIX\": [\"prefixDecl\",\"*prefixDecl\"], \n\t     \"$\": [], \n\t     \"CONSTRUCT\": [], \n\t     \"DESCRIBE\": [], \n\t     \"ASK\": [], \n\t     \"INSERT\": [], \n\t     \"DELETE\": [], \n\t     \"SELECT\": [], \n\t     \"LOAD\": [], \n\t     \"CLEAR\": [], \n\t     \"DROP\": [], \n\t     \"ADD\": [], \n\t     \"MOVE\": [], \n\t     \"COPY\": [], \n\t     \"CREATE\": [], \n\t     \"WITH\": []}, \n\t  \"*usingClause\" : {\n\t     \"USING\": [\"usingClause\",\"*usingClause\"], \n\t     \"WHERE\": []}, \n\t  \"*var\" : {\n\t     \"VAR1\": [\"var\",\"*var\"], \n\t     \"VAR2\": [\"var\",\"*var\"], \n\t     \")\": []}, \n\t  \"*varOrIRIref\" : {\n\t     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"GROUP\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"WHERE\": [], \n\t     \"{\": [], \n\t     \"FROM\": [], \n\t     \"VALUES\": [], \n\t     \"$\": []}, \n\t  \"+graphNode\" : {\n\t     \"(\": [\"graphNode\",\"*graphNode\"], \n\t     \"[\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n\t     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n\t     \"NIL\": [\"graphNode\",\"*graphNode\"], \n\t     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n\t     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n\t     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n\t     \"ANON\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n\t     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"]}, \n\t  \"+graphNodePath\" : {\n\t     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"]}, \n\t  \"+groupCondition\" : {\n\t     \"(\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n\t     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \n\t  \"+havingCondition\" : {\n\t     \"(\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n\t     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \n\t  \"+or([var,[ (,expression,AS,var,)]])\" : {\n\t     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \n\t  \"+orderCondition\" : {\n\t     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"(\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n\t     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \n\t  \"+varOrIRIref\" : {\n\t     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n\t     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"]}, \n\t  \"?.\" : {\n\t     \".\": [\".\"], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?DISTINCT\" : {\n\t     \"DISTINCT\": [\"DISTINCT\"], \n\t     \"!\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"(\": [], \n\t     \"STR\": [], \n\t     \"LANG\": [], \n\t     \"LANGMATCHES\": [], \n\t     \"DATATYPE\": [], \n\t     \"BOUND\": [], \n\t     \"IRI\": [], \n\t     \"URI\": [], \n\t     \"BNODE\": [], \n\t     \"RAND\": [], \n\t     \"ABS\": [], \n\t     \"CEIL\": [], \n\t     \"FLOOR\": [], \n\t     \"ROUND\": [], \n\t     \"CONCAT\": [], \n\t     \"STRLEN\": [], \n\t     \"UCASE\": [], \n\t     \"LCASE\": [], \n\t     \"ENCODE_FOR_URI\": [], \n\t     \"CONTAINS\": [], \n\t     \"STRSTARTS\": [], \n\t     \"STRENDS\": [], \n\t     \"STRBEFORE\": [], \n\t     \"STRAFTER\": [], \n\t     \"YEAR\": [], \n\t     \"MONTH\": [], \n\t     \"DAY\": [], \n\t     \"HOURS\": [], \n\t     \"MINUTES\": [], \n\t     \"SECONDS\": [], \n\t     \"TIMEZONE\": [], \n\t     \"TZ\": [], \n\t     \"NOW\": [], \n\t     \"UUID\": [], \n\t     \"STRUUID\": [], \n\t     \"MD5\": [], \n\t     \"SHA1\": [], \n\t     \"SHA256\": [], \n\t     \"SHA384\": [], \n\t     \"SHA512\": [], \n\t     \"COALESCE\": [], \n\t     \"IF\": [], \n\t     \"STRLANG\": [], \n\t     \"STRDT\": [], \n\t     \"SAMETERM\": [], \n\t     \"ISIRI\": [], \n\t     \"ISURI\": [], \n\t     \"ISBLANK\": [], \n\t     \"ISLITERAL\": [], \n\t     \"ISNUMERIC\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"COUNT\": [], \n\t     \"SUM\": [], \n\t     \"MIN\": [], \n\t     \"MAX\": [], \n\t     \"AVG\": [], \n\t     \"SAMPLE\": [], \n\t     \"GROUP_CONCAT\": [], \n\t     \"SUBSTR\": [], \n\t     \"REPLACE\": [], \n\t     \"REGEX\": [], \n\t     \"EXISTS\": [], \n\t     \"NOT\": [], \n\t     \"IRI_REF\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"*\": []}, \n\t  \"?GRAPH\" : {\n\t     \"GRAPH\": [\"GRAPH\"], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?SILENT\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?SILENT_1\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?SILENT_2\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"GRAPH\": [], \n\t     \"DEFAULT\": [], \n\t     \"NAMED\": [], \n\t     \"ALL\": []}, \n\t  \"?SILENT_3\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"GRAPH\": []}, \n\t  \"?SILENT_4\" : {\n\t     \"SILENT\": [\"SILENT\"], \n\t     \"DEFAULT\": [], \n\t     \"GRAPH\": [], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": []}, \n\t  \"?WHERE\" : {\n\t     \"WHERE\": [\"WHERE\"], \n\t     \"{\": []}, \n\t  \"?[,,expression]\" : {\n\t     \",\": [\"[,,expression]\"], \n\t     \")\": []}, \n\t  \"?[.,?constructTriples]\" : {\n\t     \".\": [\"[.,?constructTriples]\"], \n\t     \"}\": []}, \n\t  \"?[.,?triplesBlock]\" : {\n\t     \".\": [\"[.,?triplesBlock]\"], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?[.,?triplesTemplate]\" : {\n\t     \".\": [\"[.,?triplesTemplate]\"], \n\t     \"}\": [], \n\t     \"GRAPH\": []}, \n\t  \"?[;,SEPARATOR,=,string]\" : {\n\t     \";\": [\"[;,SEPARATOR,=,string]\"], \n\t     \")\": []}, \n\t  \"?[;,update]\" : {\n\t     \";\": [\"[;,update]\"], \n\t     \"$\": []}, \n\t  \"?[AS,var]\" : {\n\t     \"AS\": [\"[AS,var]\"], \n\t     \")\": []}, \n\t  \"?[INTO,graphRef]\" : {\n\t     \"INTO\": [\"[INTO,graphRef]\"], \n\t     \";\": [], \n\t     \"$\": []}, \n\t  \"?[or([verbPath,verbSimple]),objectList]\" : {\n\t     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \n\t     \";\": [], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n\t     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n\t     \")\": []}, \n\t  \"?[update1,?[;,update]]\" : {\n\t     \"INSERT\": [\"[update1,?[;,update]]\"], \n\t     \"DELETE\": [\"[update1,?[;,update]]\"], \n\t     \"LOAD\": [\"[update1,?[;,update]]\"], \n\t     \"CLEAR\": [\"[update1,?[;,update]]\"], \n\t     \"DROP\": [\"[update1,?[;,update]]\"], \n\t     \"ADD\": [\"[update1,?[;,update]]\"], \n\t     \"MOVE\": [\"[update1,?[;,update]]\"], \n\t     \"COPY\": [\"[update1,?[;,update]]\"], \n\t     \"CREATE\": [\"[update1,?[;,update]]\"], \n\t     \"WITH\": [\"[update1,?[;,update]]\"], \n\t     \"$\": []}, \n\t  \"?[verb,objectList]\" : {\n\t     \"a\": [\"[verb,objectList]\"], \n\t     \"VAR1\": [\"[verb,objectList]\"], \n\t     \"VAR2\": [\"[verb,objectList]\"], \n\t     \"IRI_REF\": [\"[verb,objectList]\"], \n\t     \"PNAME_LN\": [\"[verb,objectList]\"], \n\t     \"PNAME_NS\": [\"[verb,objectList]\"], \n\t     \";\": [], \n\t     \".\": [], \n\t     \"]\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"?argList\" : {\n\t     \"NIL\": [\"argList\"], \n\t     \"(\": [\"argList\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"*\": [], \n\t     \"/\": [], \n\t     \";\": []}, \n\t  \"?baseDecl\" : {\n\t     \"BASE\": [\"baseDecl\"], \n\t     \"$\": [], \n\t     \"CONSTRUCT\": [], \n\t     \"DESCRIBE\": [], \n\t     \"ASK\": [], \n\t     \"INSERT\": [], \n\t     \"DELETE\": [], \n\t     \"SELECT\": [], \n\t     \"LOAD\": [], \n\t     \"CLEAR\": [], \n\t     \"DROP\": [], \n\t     \"ADD\": [], \n\t     \"MOVE\": [], \n\t     \"COPY\": [], \n\t     \"CREATE\": [], \n\t     \"WITH\": [], \n\t     \"PREFIX\": []}, \n\t  \"?constructTriples\" : {\n\t     \"VAR1\": [\"constructTriples\"], \n\t     \"VAR2\": [\"constructTriples\"], \n\t     \"NIL\": [\"constructTriples\"], \n\t     \"(\": [\"constructTriples\"], \n\t     \"[\": [\"constructTriples\"], \n\t     \"IRI_REF\": [\"constructTriples\"], \n\t     \"TRUE\": [\"constructTriples\"], \n\t     \"FALSE\": [\"constructTriples\"], \n\t     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \n\t     \"ANON\": [\"constructTriples\"], \n\t     \"PNAME_LN\": [\"constructTriples\"], \n\t     \"PNAME_NS\": [\"constructTriples\"], \n\t     \"STRING_LITERAL1\": [\"constructTriples\"], \n\t     \"STRING_LITERAL2\": [\"constructTriples\"], \n\t     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \n\t     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \n\t     \"INTEGER\": [\"constructTriples\"], \n\t     \"DECIMAL\": [\"constructTriples\"], \n\t     \"DOUBLE\": [\"constructTriples\"], \n\t     \"INTEGER_POSITIVE\": [\"constructTriples\"], \n\t     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \n\t     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \n\t     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \n\t     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \n\t     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \n\t     \"}\": []}, \n\t  \"?groupClause\" : {\n\t     \"GROUP\": [\"groupClause\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?havingClause\" : {\n\t     \"HAVING\": [\"havingClause\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"ORDER\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?insertClause\" : {\n\t     \"INSERT\": [\"insertClause\"], \n\t     \"WHERE\": [], \n\t     \"USING\": []}, \n\t  \"?limitClause\" : {\n\t     \"LIMIT\": [\"limitClause\"], \n\t     \"VALUES\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?limitOffsetClauses\" : {\n\t     \"LIMIT\": [\"limitOffsetClauses\"], \n\t     \"OFFSET\": [\"limitOffsetClauses\"], \n\t     \"VALUES\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?offsetClause\" : {\n\t     \"OFFSET\": [\"offsetClause\"], \n\t     \"VALUES\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?or([DISTINCT,REDUCED])\" : {\n\t     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \n\t     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \n\t     \"*\": [], \n\t     \"(\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": []}, \n\t  \"?or([LANGTAG,[^^,iriRef]])\" : {\n\t     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \n\t     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \n\t     \"UNDEF\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"a\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"^\": [], \n\t     \"!\": [], \n\t     \"(\": [], \n\t     \".\": [], \n\t     \";\": [], \n\t     \",\": [], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"*\": [], \n\t     \"/\": [], \n\t     \"}\": [], \n\t     \"[\": [], \n\t     \"NIL\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"]\": [], \n\t     \"GRAPH\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": []}, \n\t  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\n\t     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"+\": [], \n\t     \"-\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": [], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \"=\": [], \n\t     \"!=\": [], \n\t     \"<\": [], \n\t     \">\": [], \n\t     \"<=\": [], \n\t     \">=\": [], \n\t     \"IN\": [], \n\t     \"NOT\": [], \n\t     \";\": []}, \n\t  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n\t     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"AS\": [], \n\t     \")\": [], \n\t     \",\": [], \n\t     \"||\": [], \n\t     \"&&\": [], \n\t     \";\": []}, \n\t  \"?orderClause\" : {\n\t     \"ORDER\": [\"orderClause\"], \n\t     \"VALUES\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"?pathMod\" : {\n\t     \"*\": [\"pathMod\"], \n\t     \"?\": [\"pathMod\"], \n\t     \"+\": [\"pathMod\"], \n\t     \"{\": [\"pathMod\"], \n\t     \"|\": [], \n\t     \"/\": [], \n\t     \")\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"?triplesBlock\" : {\n\t     \"VAR1\": [\"triplesBlock\"], \n\t     \"VAR2\": [\"triplesBlock\"], \n\t     \"NIL\": [\"triplesBlock\"], \n\t     \"(\": [\"triplesBlock\"], \n\t     \"[\": [\"triplesBlock\"], \n\t     \"IRI_REF\": [\"triplesBlock\"], \n\t     \"TRUE\": [\"triplesBlock\"], \n\t     \"FALSE\": [\"triplesBlock\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \n\t     \"ANON\": [\"triplesBlock\"], \n\t     \"PNAME_LN\": [\"triplesBlock\"], \n\t     \"PNAME_NS\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL1\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL2\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \n\t     \"INTEGER\": [\"triplesBlock\"], \n\t     \"DECIMAL\": [\"triplesBlock\"], \n\t     \"DOUBLE\": [\"triplesBlock\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"?triplesTemplate\" : {\n\t     \"VAR1\": [\"triplesTemplate\"], \n\t     \"VAR2\": [\"triplesTemplate\"], \n\t     \"NIL\": [\"triplesTemplate\"], \n\t     \"(\": [\"triplesTemplate\"], \n\t     \"[\": [\"triplesTemplate\"], \n\t     \"IRI_REF\": [\"triplesTemplate\"], \n\t     \"TRUE\": [\"triplesTemplate\"], \n\t     \"FALSE\": [\"triplesTemplate\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesTemplate\"], \n\t     \"ANON\": [\"triplesTemplate\"], \n\t     \"PNAME_LN\": [\"triplesTemplate\"], \n\t     \"PNAME_NS\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL1\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL2\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesTemplate\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesTemplate\"], \n\t     \"INTEGER\": [\"triplesTemplate\"], \n\t     \"DECIMAL\": [\"triplesTemplate\"], \n\t     \"DOUBLE\": [\"triplesTemplate\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesTemplate\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesTemplate\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesTemplate\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesTemplate\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesTemplate\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesTemplate\"], \n\t     \"}\": [], \n\t     \"GRAPH\": []}, \n\t  \"?whereClause\" : {\n\t     \"WHERE\": [\"whereClause\"], \n\t     \"{\": [\"whereClause\"], \n\t     \"ORDER\": [], \n\t     \"HAVING\": [], \n\t     \"GROUP\": [], \n\t     \"LIMIT\": [], \n\t     \"OFFSET\": [], \n\t     \"VALUES\": [], \n\t     \"$\": []}, \n\t  \"[ (,*dataBlockValue,)]\" : {\n\t     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \n\t  \"[ (,*var,)]\" : {\n\t     \"(\": [\"(\",\"*var\",\")\"]}, \n\t  \"[ (,expression,)]\" : {\n\t     \"(\": [\"(\",\"expression\",\")\"]}, \n\t  \"[ (,expression,AS,var,)]\" : {\n\t     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n\t  \"[!=,numericExpression]\" : {\n\t     \"!=\": [\"!=\",\"numericExpression\"]}, \n\t  \"[&&,valueLogical]\" : {\n\t     \"&&\": [\"&&\",\"valueLogical\"]}, \n\t  \"[*,unaryExpression]\" : {\n\t     \"*\": [\"*\",\"unaryExpression\"]}, \n\t  \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\" : {\n\t     \"WHERE\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"], \n\t     \"FROM\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]}, \n\t  \"[+,multiplicativeExpression]\" : {\n\t     \"+\": [\"+\",\"multiplicativeExpression\"]}, \n\t  \"[,,expression]\" : {\n\t     \",\": [\",\",\"expression\"]}, \n\t  \"[,,integer,}]\" : {\n\t     \",\": [\",\",\"integer\",\"}\"]}, \n\t  \"[,,objectPath]\" : {\n\t     \",\": [\",\",\"objectPath\"]}, \n\t  \"[,,object]\" : {\n\t     \",\": [\",\",\"object\"]}, \n\t  \"[,,or([},[integer,}]])]\" : {\n\t     \",\": [\",\",\"or([},[integer,}]])\"]}, \n\t  \"[-,multiplicativeExpression]\" : {\n\t     \"-\": [\"-\",\"multiplicativeExpression\"]}, \n\t  \"[.,?constructTriples]\" : {\n\t     \".\": [\".\",\"?constructTriples\"]}, \n\t  \"[.,?triplesBlock]\" : {\n\t     \".\": [\".\",\"?triplesBlock\"]}, \n\t  \"[.,?triplesTemplate]\" : {\n\t     \".\": [\".\",\"?triplesTemplate\"]}, \n\t  \"[/,pathEltOrInverse]\" : {\n\t     \"/\": [\"/\",\"pathEltOrInverse\"]}, \n\t  \"[/,unaryExpression]\" : {\n\t     \"/\": [\"/\",\"unaryExpression\"]}, \n\t  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n\t     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \n\t  \"[;,?[verb,objectList]]\" : {\n\t     \";\": [\";\",\"?[verb,objectList]\"]}, \n\t  \"[;,SEPARATOR,=,string]\" : {\n\t     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \n\t  \"[;,update]\" : {\n\t     \";\": [\";\",\"update\"]}, \n\t  \"[<,numericExpression]\" : {\n\t     \"<\": [\"<\",\"numericExpression\"]}, \n\t  \"[<=,numericExpression]\" : {\n\t     \"<=\": [\"<=\",\"numericExpression\"]}, \n\t  \"[=,numericExpression]\" : {\n\t     \"=\": [\"=\",\"numericExpression\"]}, \n\t  \"[>,numericExpression]\" : {\n\t     \">\": [\">\",\"numericExpression\"]}, \n\t  \"[>=,numericExpression]\" : {\n\t     \">=\": [\">=\",\"numericExpression\"]}, \n\t  \"[AS,var]\" : {\n\t     \"AS\": [\"AS\",\"var\"]}, \n\t  \"[IN,expressionList]\" : {\n\t     \"IN\": [\"IN\",\"expressionList\"]}, \n\t  \"[INTO,graphRef]\" : {\n\t     \"INTO\": [\"INTO\",\"graphRef\"]}, \n\t  \"[NAMED,iriRef]\" : {\n\t     \"NAMED\": [\"NAMED\",\"iriRef\"]}, \n\t  \"[NOT,IN,expressionList]\" : {\n\t     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \n\t  \"[UNION,groupGraphPattern]\" : {\n\t     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \n\t  \"[^^,iriRef]\" : {\n\t     \"^^\": [\"^^\",\"iriRef\"]}, \n\t  \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\" : {\n\t     \"{\": [\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n\t  \"[deleteClause,?insertClause]\" : {\n\t     \"DELETE\": [\"deleteClause\",\"?insertClause\"]}, \n\t  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\n\t     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n\t     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \n\t  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\n\t     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \n\t  \"[integer,}]\" : {\n\t     \"INTEGER\": [\"integer\",\"}\"]}, \n\t  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\n\t     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n\t  \"[or([verbPath,verbSimple]),objectList]\" : {\n\t     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n\t     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \n\t  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n\t     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n\t     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \n\t  \"[quadsNotTriples,?.,?triplesTemplate]\" : {\n\t     \"GRAPH\": [\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]}, \n\t  \"[update1,?[;,update]]\" : {\n\t     \"INSERT\": [\"update1\",\"?[;,update]\"], \n\t     \"DELETE\": [\"update1\",\"?[;,update]\"], \n\t     \"LOAD\": [\"update1\",\"?[;,update]\"], \n\t     \"CLEAR\": [\"update1\",\"?[;,update]\"], \n\t     \"DROP\": [\"update1\",\"?[;,update]\"], \n\t     \"ADD\": [\"update1\",\"?[;,update]\"], \n\t     \"MOVE\": [\"update1\",\"?[;,update]\"], \n\t     \"COPY\": [\"update1\",\"?[;,update]\"], \n\t     \"CREATE\": [\"update1\",\"?[;,update]\"], \n\t     \"WITH\": [\"update1\",\"?[;,update]\"]}, \n\t  \"[verb,objectList]\" : {\n\t     \"a\": [\"verb\",\"objectList\"], \n\t     \"VAR1\": [\"verb\",\"objectList\"], \n\t     \"VAR2\": [\"verb\",\"objectList\"], \n\t     \"IRI_REF\": [\"verb\",\"objectList\"], \n\t     \"PNAME_LN\": [\"verb\",\"objectList\"], \n\t     \"PNAME_NS\": [\"verb\",\"objectList\"]}, \n\t  \"[|,pathOneInPropertySet]\" : {\n\t     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \n\t  \"[|,pathSequence]\" : {\n\t     \"|\": [\"|\",\"pathSequence\"]}, \n\t  \"[||,conditionalAndExpression]\" : {\n\t     \"||\": [\"||\",\"conditionalAndExpression\"]}, \n\t  \"add\" : {\n\t     \"ADD\": [\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n\t  \"additiveExpression\" : {\n\t     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n\t     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \n\t  \"aggregate\" : {\n\t     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \n\t     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n\t     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \n\t  \"allowBnodes\" : {\n\t     \"}\": []}, \n\t  \"allowVars\" : {\n\t     \"}\": []}, \n\t  \"argList\" : {\n\t     \"NIL\": [\"NIL\"], \n\t     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \n\t  \"askQuery\" : {\n\t     \"ASK\": [\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n\t  \"baseDecl\" : {\n\t     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \n\t  \"bind\" : {\n\t     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n\t  \"blankNode\" : {\n\t     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \n\t     \"ANON\": [\"ANON\"]}, \n\t  \"blankNodePropertyList\" : {\n\t     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \n\t  \"blankNodePropertyListPath\" : {\n\t     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \n\t  \"booleanLiteral\" : {\n\t     \"TRUE\": [\"TRUE\"], \n\t     \"FALSE\": [\"FALSE\"]}, \n\t  \"brackettedExpression\" : {\n\t     \"(\": [\"(\",\"expression\",\")\"]}, \n\t  \"builtInCall\" : {\n\t     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \n\t     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \n\t     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \n\t     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \n\t     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \n\t     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \n\t     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \n\t     \"RAND\": [\"RAND\",\"NIL\"], \n\t     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \n\t     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \n\t     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \n\t     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \n\t     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \n\t     \"SUBSTR\": [\"substringExpression\"], \n\t     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \n\t     \"REPLACE\": [\"strReplaceExpression\"], \n\t     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \n\t     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \n\t     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \n\t     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \n\t     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \n\t     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \n\t     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \n\t     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \n\t     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \n\t     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \n\t     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \n\t     \"NOW\": [\"NOW\",\"NIL\"], \n\t     \"UUID\": [\"UUID\",\"NIL\"], \n\t     \"STRUUID\": [\"STRUUID\",\"NIL\"], \n\t     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \n\t     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \n\t     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \n\t     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \n\t     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \n\t     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \n\t     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n\t     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \n\t     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \n\t     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \n\t     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \n\t     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \n\t     \"REGEX\": [\"regexExpression\"], \n\t     \"EXISTS\": [\"existsFunc\"], \n\t     \"NOT\": [\"notExistsFunc\"]}, \n\t  \"clear\" : {\n\t     \"CLEAR\": [\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]}, \n\t  \"collection\" : {\n\t     \"(\": [\"(\",\"+graphNode\",\")\"]}, \n\t  \"collectionPath\" : {\n\t     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \n\t  \"conditionalAndExpression\" : {\n\t     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n\t     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \n\t  \"conditionalOrExpression\" : {\n\t     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n\t     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \n\t  \"constraint\" : {\n\t     \"(\": [\"brackettedExpression\"], \n\t     \"STR\": [\"builtInCall\"], \n\t     \"LANG\": [\"builtInCall\"], \n\t     \"LANGMATCHES\": [\"builtInCall\"], \n\t     \"DATATYPE\": [\"builtInCall\"], \n\t     \"BOUND\": [\"builtInCall\"], \n\t     \"IRI\": [\"builtInCall\"], \n\t     \"URI\": [\"builtInCall\"], \n\t     \"BNODE\": [\"builtInCall\"], \n\t     \"RAND\": [\"builtInCall\"], \n\t     \"ABS\": [\"builtInCall\"], \n\t     \"CEIL\": [\"builtInCall\"], \n\t     \"FLOOR\": [\"builtInCall\"], \n\t     \"ROUND\": [\"builtInCall\"], \n\t     \"CONCAT\": [\"builtInCall\"], \n\t     \"STRLEN\": [\"builtInCall\"], \n\t     \"UCASE\": [\"builtInCall\"], \n\t     \"LCASE\": [\"builtInCall\"], \n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n\t     \"CONTAINS\": [\"builtInCall\"], \n\t     \"STRSTARTS\": [\"builtInCall\"], \n\t     \"STRENDS\": [\"builtInCall\"], \n\t     \"STRBEFORE\": [\"builtInCall\"], \n\t     \"STRAFTER\": [\"builtInCall\"], \n\t     \"YEAR\": [\"builtInCall\"], \n\t     \"MONTH\": [\"builtInCall\"], \n\t     \"DAY\": [\"builtInCall\"], \n\t     \"HOURS\": [\"builtInCall\"], \n\t     \"MINUTES\": [\"builtInCall\"], \n\t     \"SECONDS\": [\"builtInCall\"], \n\t     \"TIMEZONE\": [\"builtInCall\"], \n\t     \"TZ\": [\"builtInCall\"], \n\t     \"NOW\": [\"builtInCall\"], \n\t     \"UUID\": [\"builtInCall\"], \n\t     \"STRUUID\": [\"builtInCall\"], \n\t     \"MD5\": [\"builtInCall\"], \n\t     \"SHA1\": [\"builtInCall\"], \n\t     \"SHA256\": [\"builtInCall\"], \n\t     \"SHA384\": [\"builtInCall\"], \n\t     \"SHA512\": [\"builtInCall\"], \n\t     \"COALESCE\": [\"builtInCall\"], \n\t     \"IF\": [\"builtInCall\"], \n\t     \"STRLANG\": [\"builtInCall\"], \n\t     \"STRDT\": [\"builtInCall\"], \n\t     \"SAMETERM\": [\"builtInCall\"], \n\t     \"ISIRI\": [\"builtInCall\"], \n\t     \"ISURI\": [\"builtInCall\"], \n\t     \"ISBLANK\": [\"builtInCall\"], \n\t     \"ISLITERAL\": [\"builtInCall\"], \n\t     \"ISNUMERIC\": [\"builtInCall\"], \n\t     \"SUBSTR\": [\"builtInCall\"], \n\t     \"REPLACE\": [\"builtInCall\"], \n\t     \"REGEX\": [\"builtInCall\"], \n\t     \"EXISTS\": [\"builtInCall\"], \n\t     \"NOT\": [\"builtInCall\"], \n\t     \"IRI_REF\": [\"functionCall\"], \n\t     \"PNAME_LN\": [\"functionCall\"], \n\t     \"PNAME_NS\": [\"functionCall\"]}, \n\t  \"constructQuery\" : {\n\t     \"CONSTRUCT\": [\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]}, \n\t  \"constructTemplate\" : {\n\t     \"{\": [\"{\",\"?constructTriples\",\"}\"]}, \n\t  \"constructTriples\" : {\n\t     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \n\t  \"copy\" : {\n\t     \"COPY\": [\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n\t  \"create\" : {\n\t     \"CREATE\": [\"CREATE\",\"?SILENT_3\",\"graphRef\"]}, \n\t  \"dataBlock\" : {\n\t     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n\t     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n\t     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n\t     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \n\t  \"dataBlockValue\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n\t     \"INTEGER\": [\"numericLiteral\"], \n\t     \"DECIMAL\": [\"numericLiteral\"], \n\t     \"DOUBLE\": [\"numericLiteral\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n\t     \"TRUE\": [\"booleanLiteral\"], \n\t     \"FALSE\": [\"booleanLiteral\"], \n\t     \"UNDEF\": [\"UNDEF\"]}, \n\t  \"datasetClause\" : {\n\t     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n\t  \"defaultGraphClause\" : {\n\t     \"IRI_REF\": [\"sourceSelector\"], \n\t     \"PNAME_LN\": [\"sourceSelector\"], \n\t     \"PNAME_NS\": [\"sourceSelector\"]}, \n\t  \"delete1\" : {\n\t     \"DATA\": [\"DATA\",\"quadDataNoBnodes\"], \n\t     \"WHERE\": [\"WHERE\",\"quadPatternNoBnodes\"], \n\t     \"{\": [\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n\t  \"deleteClause\" : {\n\t     \"DELETE\": [\"DELETE\",\"quadPattern\"]}, \n\t  \"describeDatasetClause\" : {\n\t     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n\t  \"describeQuery\" : {\n\t     \"DESCRIBE\": [\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]}, \n\t  \"disallowBnodes\" : {\n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"disallowVars\" : {\n\t     \"}\": [], \n\t     \"GRAPH\": [], \n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"NIL\": [], \n\t     \"(\": [], \n\t     \"[\": [], \n\t     \"IRI_REF\": [], \n\t     \"TRUE\": [], \n\t     \"FALSE\": [], \n\t     \"BLANK_NODE_LABEL\": [], \n\t     \"ANON\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"STRING_LITERAL1\": [], \n\t     \"STRING_LITERAL2\": [], \n\t     \"STRING_LITERAL_LONG1\": [], \n\t     \"STRING_LITERAL_LONG2\": [], \n\t     \"INTEGER\": [], \n\t     \"DECIMAL\": [], \n\t     \"DOUBLE\": [], \n\t     \"INTEGER_POSITIVE\": [], \n\t     \"DECIMAL_POSITIVE\": [], \n\t     \"DOUBLE_POSITIVE\": [], \n\t     \"INTEGER_NEGATIVE\": [], \n\t     \"DECIMAL_NEGATIVE\": [], \n\t     \"DOUBLE_NEGATIVE\": []}, \n\t  \"drop\" : {\n\t     \"DROP\": [\"DROP\",\"?SILENT_2\",\"graphRefAll\"]}, \n\t  \"existsFunc\" : {\n\t     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \n\t  \"expression\" : {\n\t     \"!\": [\"conditionalOrExpression\"], \n\t     \"+\": [\"conditionalOrExpression\"], \n\t     \"-\": [\"conditionalOrExpression\"], \n\t     \"VAR1\": [\"conditionalOrExpression\"], \n\t     \"VAR2\": [\"conditionalOrExpression\"], \n\t     \"(\": [\"conditionalOrExpression\"], \n\t     \"STR\": [\"conditionalOrExpression\"], \n\t     \"LANG\": [\"conditionalOrExpression\"], \n\t     \"LANGMATCHES\": [\"conditionalOrExpression\"], \n\t     \"DATATYPE\": [\"conditionalOrExpression\"], \n\t     \"BOUND\": [\"conditionalOrExpression\"], \n\t     \"IRI\": [\"conditionalOrExpression\"], \n\t     \"URI\": [\"conditionalOrExpression\"], \n\t     \"BNODE\": [\"conditionalOrExpression\"], \n\t     \"RAND\": [\"conditionalOrExpression\"], \n\t     \"ABS\": [\"conditionalOrExpression\"], \n\t     \"CEIL\": [\"conditionalOrExpression\"], \n\t     \"FLOOR\": [\"conditionalOrExpression\"], \n\t     \"ROUND\": [\"conditionalOrExpression\"], \n\t     \"CONCAT\": [\"conditionalOrExpression\"], \n\t     \"STRLEN\": [\"conditionalOrExpression\"], \n\t     \"UCASE\": [\"conditionalOrExpression\"], \n\t     \"LCASE\": [\"conditionalOrExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \n\t     \"CONTAINS\": [\"conditionalOrExpression\"], \n\t     \"STRSTARTS\": [\"conditionalOrExpression\"], \n\t     \"STRENDS\": [\"conditionalOrExpression\"], \n\t     \"STRBEFORE\": [\"conditionalOrExpression\"], \n\t     \"STRAFTER\": [\"conditionalOrExpression\"], \n\t     \"YEAR\": [\"conditionalOrExpression\"], \n\t     \"MONTH\": [\"conditionalOrExpression\"], \n\t     \"DAY\": [\"conditionalOrExpression\"], \n\t     \"HOURS\": [\"conditionalOrExpression\"], \n\t     \"MINUTES\": [\"conditionalOrExpression\"], \n\t     \"SECONDS\": [\"conditionalOrExpression\"], \n\t     \"TIMEZONE\": [\"conditionalOrExpression\"], \n\t     \"TZ\": [\"conditionalOrExpression\"], \n\t     \"NOW\": [\"conditionalOrExpression\"], \n\t     \"UUID\": [\"conditionalOrExpression\"], \n\t     \"STRUUID\": [\"conditionalOrExpression\"], \n\t     \"MD5\": [\"conditionalOrExpression\"], \n\t     \"SHA1\": [\"conditionalOrExpression\"], \n\t     \"SHA256\": [\"conditionalOrExpression\"], \n\t     \"SHA384\": [\"conditionalOrExpression\"], \n\t     \"SHA512\": [\"conditionalOrExpression\"], \n\t     \"COALESCE\": [\"conditionalOrExpression\"], \n\t     \"IF\": [\"conditionalOrExpression\"], \n\t     \"STRLANG\": [\"conditionalOrExpression\"], \n\t     \"STRDT\": [\"conditionalOrExpression\"], \n\t     \"SAMETERM\": [\"conditionalOrExpression\"], \n\t     \"ISIRI\": [\"conditionalOrExpression\"], \n\t     \"ISURI\": [\"conditionalOrExpression\"], \n\t     \"ISBLANK\": [\"conditionalOrExpression\"], \n\t     \"ISLITERAL\": [\"conditionalOrExpression\"], \n\t     \"ISNUMERIC\": [\"conditionalOrExpression\"], \n\t     \"TRUE\": [\"conditionalOrExpression\"], \n\t     \"FALSE\": [\"conditionalOrExpression\"], \n\t     \"COUNT\": [\"conditionalOrExpression\"], \n\t     \"SUM\": [\"conditionalOrExpression\"], \n\t     \"MIN\": [\"conditionalOrExpression\"], \n\t     \"MAX\": [\"conditionalOrExpression\"], \n\t     \"AVG\": [\"conditionalOrExpression\"], \n\t     \"SAMPLE\": [\"conditionalOrExpression\"], \n\t     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \n\t     \"SUBSTR\": [\"conditionalOrExpression\"], \n\t     \"REPLACE\": [\"conditionalOrExpression\"], \n\t     \"REGEX\": [\"conditionalOrExpression\"], \n\t     \"EXISTS\": [\"conditionalOrExpression\"], \n\t     \"NOT\": [\"conditionalOrExpression\"], \n\t     \"IRI_REF\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \n\t     \"INTEGER\": [\"conditionalOrExpression\"], \n\t     \"DECIMAL\": [\"conditionalOrExpression\"], \n\t     \"DOUBLE\": [\"conditionalOrExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \n\t     \"PNAME_LN\": [\"conditionalOrExpression\"], \n\t     \"PNAME_NS\": [\"conditionalOrExpression\"]}, \n\t  \"expressionList\" : {\n\t     \"NIL\": [\"NIL\"], \n\t     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \n\t  \"filter\" : {\n\t     \"FILTER\": [\"FILTER\",\"constraint\"]}, \n\t  \"functionCall\" : {\n\t     \"IRI_REF\": [\"iriRef\",\"argList\"], \n\t     \"PNAME_LN\": [\"iriRef\",\"argList\"], \n\t     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \n\t  \"graphGraphPattern\" : {\n\t     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n\t  \"graphNode\" : {\n\t     \"VAR1\": [\"varOrTerm\"], \n\t     \"VAR2\": [\"varOrTerm\"], \n\t     \"NIL\": [\"varOrTerm\"], \n\t     \"IRI_REF\": [\"varOrTerm\"], \n\t     \"TRUE\": [\"varOrTerm\"], \n\t     \"FALSE\": [\"varOrTerm\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n\t     \"ANON\": [\"varOrTerm\"], \n\t     \"PNAME_LN\": [\"varOrTerm\"], \n\t     \"PNAME_NS\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n\t     \"INTEGER\": [\"varOrTerm\"], \n\t     \"DECIMAL\": [\"varOrTerm\"], \n\t     \"DOUBLE\": [\"varOrTerm\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n\t     \"(\": [\"triplesNode\"], \n\t     \"[\": [\"triplesNode\"]}, \n\t  \"graphNodePath\" : {\n\t     \"VAR1\": [\"varOrTerm\"], \n\t     \"VAR2\": [\"varOrTerm\"], \n\t     \"NIL\": [\"varOrTerm\"], \n\t     \"IRI_REF\": [\"varOrTerm\"], \n\t     \"TRUE\": [\"varOrTerm\"], \n\t     \"FALSE\": [\"varOrTerm\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n\t     \"ANON\": [\"varOrTerm\"], \n\t     \"PNAME_LN\": [\"varOrTerm\"], \n\t     \"PNAME_NS\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n\t     \"INTEGER\": [\"varOrTerm\"], \n\t     \"DECIMAL\": [\"varOrTerm\"], \n\t     \"DOUBLE\": [\"varOrTerm\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n\t     \"(\": [\"triplesNodePath\"], \n\t     \"[\": [\"triplesNodePath\"]}, \n\t  \"graphOrDefault\" : {\n\t     \"DEFAULT\": [\"DEFAULT\"], \n\t     \"IRI_REF\": [\"?GRAPH\",\"iriRef\"], \n\t     \"PNAME_LN\": [\"?GRAPH\",\"iriRef\"], \n\t     \"PNAME_NS\": [\"?GRAPH\",\"iriRef\"], \n\t     \"GRAPH\": [\"?GRAPH\",\"iriRef\"]}, \n\t  \"graphPatternNotTriples\" : {\n\t     \"{\": [\"groupOrUnionGraphPattern\"], \n\t     \"OPTIONAL\": [\"optionalGraphPattern\"], \n\t     \"MINUS\": [\"minusGraphPattern\"], \n\t     \"GRAPH\": [\"graphGraphPattern\"], \n\t     \"SERVICE\": [\"serviceGraphPattern\"], \n\t     \"FILTER\": [\"filter\"], \n\t     \"BIND\": [\"bind\"], \n\t     \"VALUES\": [\"inlineData\"]}, \n\t  \"graphRef\" : {\n\t     \"GRAPH\": [\"GRAPH\",\"iriRef\"]}, \n\t  \"graphRefAll\" : {\n\t     \"GRAPH\": [\"graphRef\"], \n\t     \"DEFAULT\": [\"DEFAULT\"], \n\t     \"NAMED\": [\"NAMED\"], \n\t     \"ALL\": [\"ALL\"]}, \n\t  \"graphTerm\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n\t     \"INTEGER\": [\"numericLiteral\"], \n\t     \"DECIMAL\": [\"numericLiteral\"], \n\t     \"DOUBLE\": [\"numericLiteral\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n\t     \"TRUE\": [\"booleanLiteral\"], \n\t     \"FALSE\": [\"booleanLiteral\"], \n\t     \"BLANK_NODE_LABEL\": [\"blankNode\"], \n\t     \"ANON\": [\"blankNode\"], \n\t     \"NIL\": [\"NIL\"]}, \n\t  \"groupClause\" : {\n\t     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \n\t  \"groupCondition\" : {\n\t     \"STR\": [\"builtInCall\"], \n\t     \"LANG\": [\"builtInCall\"], \n\t     \"LANGMATCHES\": [\"builtInCall\"], \n\t     \"DATATYPE\": [\"builtInCall\"], \n\t     \"BOUND\": [\"builtInCall\"], \n\t     \"IRI\": [\"builtInCall\"], \n\t     \"URI\": [\"builtInCall\"], \n\t     \"BNODE\": [\"builtInCall\"], \n\t     \"RAND\": [\"builtInCall\"], \n\t     \"ABS\": [\"builtInCall\"], \n\t     \"CEIL\": [\"builtInCall\"], \n\t     \"FLOOR\": [\"builtInCall\"], \n\t     \"ROUND\": [\"builtInCall\"], \n\t     \"CONCAT\": [\"builtInCall\"], \n\t     \"STRLEN\": [\"builtInCall\"], \n\t     \"UCASE\": [\"builtInCall\"], \n\t     \"LCASE\": [\"builtInCall\"], \n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n\t     \"CONTAINS\": [\"builtInCall\"], \n\t     \"STRSTARTS\": [\"builtInCall\"], \n\t     \"STRENDS\": [\"builtInCall\"], \n\t     \"STRBEFORE\": [\"builtInCall\"], \n\t     \"STRAFTER\": [\"builtInCall\"], \n\t     \"YEAR\": [\"builtInCall\"], \n\t     \"MONTH\": [\"builtInCall\"], \n\t     \"DAY\": [\"builtInCall\"], \n\t     \"HOURS\": [\"builtInCall\"], \n\t     \"MINUTES\": [\"builtInCall\"], \n\t     \"SECONDS\": [\"builtInCall\"], \n\t     \"TIMEZONE\": [\"builtInCall\"], \n\t     \"TZ\": [\"builtInCall\"], \n\t     \"NOW\": [\"builtInCall\"], \n\t     \"UUID\": [\"builtInCall\"], \n\t     \"STRUUID\": [\"builtInCall\"], \n\t     \"MD5\": [\"builtInCall\"], \n\t     \"SHA1\": [\"builtInCall\"], \n\t     \"SHA256\": [\"builtInCall\"], \n\t     \"SHA384\": [\"builtInCall\"], \n\t     \"SHA512\": [\"builtInCall\"], \n\t     \"COALESCE\": [\"builtInCall\"], \n\t     \"IF\": [\"builtInCall\"], \n\t     \"STRLANG\": [\"builtInCall\"], \n\t     \"STRDT\": [\"builtInCall\"], \n\t     \"SAMETERM\": [\"builtInCall\"], \n\t     \"ISIRI\": [\"builtInCall\"], \n\t     \"ISURI\": [\"builtInCall\"], \n\t     \"ISBLANK\": [\"builtInCall\"], \n\t     \"ISLITERAL\": [\"builtInCall\"], \n\t     \"ISNUMERIC\": [\"builtInCall\"], \n\t     \"SUBSTR\": [\"builtInCall\"], \n\t     \"REPLACE\": [\"builtInCall\"], \n\t     \"REGEX\": [\"builtInCall\"], \n\t     \"EXISTS\": [\"builtInCall\"], \n\t     \"NOT\": [\"builtInCall\"], \n\t     \"IRI_REF\": [\"functionCall\"], \n\t     \"PNAME_LN\": [\"functionCall\"], \n\t     \"PNAME_NS\": [\"functionCall\"], \n\t     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"]}, \n\t  \"groupGraphPattern\" : {\n\t     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \n\t  \"groupGraphPatternSub\" : {\n\t     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n\t     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \n\t  \"groupOrUnionGraphPattern\" : {\n\t     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \n\t  \"havingClause\" : {\n\t     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \n\t  \"havingCondition\" : {\n\t     \"(\": [\"constraint\"], \n\t     \"STR\": [\"constraint\"], \n\t     \"LANG\": [\"constraint\"], \n\t     \"LANGMATCHES\": [\"constraint\"], \n\t     \"DATATYPE\": [\"constraint\"], \n\t     \"BOUND\": [\"constraint\"], \n\t     \"IRI\": [\"constraint\"], \n\t     \"URI\": [\"constraint\"], \n\t     \"BNODE\": [\"constraint\"], \n\t     \"RAND\": [\"constraint\"], \n\t     \"ABS\": [\"constraint\"], \n\t     \"CEIL\": [\"constraint\"], \n\t     \"FLOOR\": [\"constraint\"], \n\t     \"ROUND\": [\"constraint\"], \n\t     \"CONCAT\": [\"constraint\"], \n\t     \"STRLEN\": [\"constraint\"], \n\t     \"UCASE\": [\"constraint\"], \n\t     \"LCASE\": [\"constraint\"], \n\t     \"ENCODE_FOR_URI\": [\"constraint\"], \n\t     \"CONTAINS\": [\"constraint\"], \n\t     \"STRSTARTS\": [\"constraint\"], \n\t     \"STRENDS\": [\"constraint\"], \n\t     \"STRBEFORE\": [\"constraint\"], \n\t     \"STRAFTER\": [\"constraint\"], \n\t     \"YEAR\": [\"constraint\"], \n\t     \"MONTH\": [\"constraint\"], \n\t     \"DAY\": [\"constraint\"], \n\t     \"HOURS\": [\"constraint\"], \n\t     \"MINUTES\": [\"constraint\"], \n\t     \"SECONDS\": [\"constraint\"], \n\t     \"TIMEZONE\": [\"constraint\"], \n\t     \"TZ\": [\"constraint\"], \n\t     \"NOW\": [\"constraint\"], \n\t     \"UUID\": [\"constraint\"], \n\t     \"STRUUID\": [\"constraint\"], \n\t     \"MD5\": [\"constraint\"], \n\t     \"SHA1\": [\"constraint\"], \n\t     \"SHA256\": [\"constraint\"], \n\t     \"SHA384\": [\"constraint\"], \n\t     \"SHA512\": [\"constraint\"], \n\t     \"COALESCE\": [\"constraint\"], \n\t     \"IF\": [\"constraint\"], \n\t     \"STRLANG\": [\"constraint\"], \n\t     \"STRDT\": [\"constraint\"], \n\t     \"SAMETERM\": [\"constraint\"], \n\t     \"ISIRI\": [\"constraint\"], \n\t     \"ISURI\": [\"constraint\"], \n\t     \"ISBLANK\": [\"constraint\"], \n\t     \"ISLITERAL\": [\"constraint\"], \n\t     \"ISNUMERIC\": [\"constraint\"], \n\t     \"SUBSTR\": [\"constraint\"], \n\t     \"REPLACE\": [\"constraint\"], \n\t     \"REGEX\": [\"constraint\"], \n\t     \"EXISTS\": [\"constraint\"], \n\t     \"NOT\": [\"constraint\"], \n\t     \"IRI_REF\": [\"constraint\"], \n\t     \"PNAME_LN\": [\"constraint\"], \n\t     \"PNAME_NS\": [\"constraint\"]}, \n\t  \"inlineData\" : {\n\t     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \n\t  \"inlineDataFull\" : {\n\t     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \n\t     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \n\t  \"inlineDataOneVar\" : {\n\t     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \n\t     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \n\t  \"insert1\" : {\n\t     \"DATA\": [\"DATA\",\"quadData\"], \n\t     \"{\": [\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n\t  \"insertClause\" : {\n\t     \"INSERT\": [\"INSERT\",\"quadPattern\"]}, \n\t  \"integer\" : {\n\t     \"INTEGER\": [\"INTEGER\"]}, \n\t  \"iriRef\" : {\n\t     \"IRI_REF\": [\"IRI_REF\"], \n\t     \"PNAME_LN\": [\"prefixedName\"], \n\t     \"PNAME_NS\": [\"prefixedName\"]}, \n\t  \"iriRefOrFunction\" : {\n\t     \"IRI_REF\": [\"iriRef\",\"?argList\"], \n\t     \"PNAME_LN\": [\"iriRef\",\"?argList\"], \n\t     \"PNAME_NS\": [\"iriRef\",\"?argList\"]}, \n\t  \"limitClause\" : {\n\t     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \n\t  \"limitOffsetClauses\" : {\n\t     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \n\t     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \n\t  \"load\" : {\n\t     \"LOAD\": [\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]}, \n\t  \"minusGraphPattern\" : {\n\t     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \n\t  \"modify\" : {\n\t     \"WITH\": [\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n\t  \"move\" : {\n\t     \"MOVE\": [\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n\t  \"multiplicativeExpression\" : {\n\t     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n\t     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n\t  \"namedGraphClause\" : {\n\t     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \n\t  \"notExistsFunc\" : {\n\t     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \n\t  \"numericExpression\" : {\n\t     \"!\": [\"additiveExpression\"], \n\t     \"+\": [\"additiveExpression\"], \n\t     \"-\": [\"additiveExpression\"], \n\t     \"VAR1\": [\"additiveExpression\"], \n\t     \"VAR2\": [\"additiveExpression\"], \n\t     \"(\": [\"additiveExpression\"], \n\t     \"STR\": [\"additiveExpression\"], \n\t     \"LANG\": [\"additiveExpression\"], \n\t     \"LANGMATCHES\": [\"additiveExpression\"], \n\t     \"DATATYPE\": [\"additiveExpression\"], \n\t     \"BOUND\": [\"additiveExpression\"], \n\t     \"IRI\": [\"additiveExpression\"], \n\t     \"URI\": [\"additiveExpression\"], \n\t     \"BNODE\": [\"additiveExpression\"], \n\t     \"RAND\": [\"additiveExpression\"], \n\t     \"ABS\": [\"additiveExpression\"], \n\t     \"CEIL\": [\"additiveExpression\"], \n\t     \"FLOOR\": [\"additiveExpression\"], \n\t     \"ROUND\": [\"additiveExpression\"], \n\t     \"CONCAT\": [\"additiveExpression\"], \n\t     \"STRLEN\": [\"additiveExpression\"], \n\t     \"UCASE\": [\"additiveExpression\"], \n\t     \"LCASE\": [\"additiveExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \n\t     \"CONTAINS\": [\"additiveExpression\"], \n\t     \"STRSTARTS\": [\"additiveExpression\"], \n\t     \"STRENDS\": [\"additiveExpression\"], \n\t     \"STRBEFORE\": [\"additiveExpression\"], \n\t     \"STRAFTER\": [\"additiveExpression\"], \n\t     \"YEAR\": [\"additiveExpression\"], \n\t     \"MONTH\": [\"additiveExpression\"], \n\t     \"DAY\": [\"additiveExpression\"], \n\t     \"HOURS\": [\"additiveExpression\"], \n\t     \"MINUTES\": [\"additiveExpression\"], \n\t     \"SECONDS\": [\"additiveExpression\"], \n\t     \"TIMEZONE\": [\"additiveExpression\"], \n\t     \"TZ\": [\"additiveExpression\"], \n\t     \"NOW\": [\"additiveExpression\"], \n\t     \"UUID\": [\"additiveExpression\"], \n\t     \"STRUUID\": [\"additiveExpression\"], \n\t     \"MD5\": [\"additiveExpression\"], \n\t     \"SHA1\": [\"additiveExpression\"], \n\t     \"SHA256\": [\"additiveExpression\"], \n\t     \"SHA384\": [\"additiveExpression\"], \n\t     \"SHA512\": [\"additiveExpression\"], \n\t     \"COALESCE\": [\"additiveExpression\"], \n\t     \"IF\": [\"additiveExpression\"], \n\t     \"STRLANG\": [\"additiveExpression\"], \n\t     \"STRDT\": [\"additiveExpression\"], \n\t     \"SAMETERM\": [\"additiveExpression\"], \n\t     \"ISIRI\": [\"additiveExpression\"], \n\t     \"ISURI\": [\"additiveExpression\"], \n\t     \"ISBLANK\": [\"additiveExpression\"], \n\t     \"ISLITERAL\": [\"additiveExpression\"], \n\t     \"ISNUMERIC\": [\"additiveExpression\"], \n\t     \"TRUE\": [\"additiveExpression\"], \n\t     \"FALSE\": [\"additiveExpression\"], \n\t     \"COUNT\": [\"additiveExpression\"], \n\t     \"SUM\": [\"additiveExpression\"], \n\t     \"MIN\": [\"additiveExpression\"], \n\t     \"MAX\": [\"additiveExpression\"], \n\t     \"AVG\": [\"additiveExpression\"], \n\t     \"SAMPLE\": [\"additiveExpression\"], \n\t     \"GROUP_CONCAT\": [\"additiveExpression\"], \n\t     \"SUBSTR\": [\"additiveExpression\"], \n\t     \"REPLACE\": [\"additiveExpression\"], \n\t     \"REGEX\": [\"additiveExpression\"], \n\t     \"EXISTS\": [\"additiveExpression\"], \n\t     \"NOT\": [\"additiveExpression\"], \n\t     \"IRI_REF\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL1\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL2\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \n\t     \"INTEGER\": [\"additiveExpression\"], \n\t     \"DECIMAL\": [\"additiveExpression\"], \n\t     \"DOUBLE\": [\"additiveExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \n\t     \"PNAME_LN\": [\"additiveExpression\"], \n\t     \"PNAME_NS\": [\"additiveExpression\"]}, \n\t  \"numericLiteral\" : {\n\t     \"INTEGER\": [\"numericLiteralUnsigned\"], \n\t     \"DECIMAL\": [\"numericLiteralUnsigned\"], \n\t     \"DOUBLE\": [\"numericLiteralUnsigned\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n\t  \"numericLiteralNegative\" : {\n\t     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \n\t     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \n\t     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \n\t  \"numericLiteralPositive\" : {\n\t     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \n\t     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \n\t     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \n\t  \"numericLiteralUnsigned\" : {\n\t     \"INTEGER\": [\"INTEGER\"], \n\t     \"DECIMAL\": [\"DECIMAL\"], \n\t     \"DOUBLE\": [\"DOUBLE\"]}, \n\t  \"object\" : {\n\t     \"(\": [\"graphNode\"], \n\t     \"[\": [\"graphNode\"], \n\t     \"VAR1\": [\"graphNode\"], \n\t     \"VAR2\": [\"graphNode\"], \n\t     \"NIL\": [\"graphNode\"], \n\t     \"IRI_REF\": [\"graphNode\"], \n\t     \"TRUE\": [\"graphNode\"], \n\t     \"FALSE\": [\"graphNode\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNode\"], \n\t     \"ANON\": [\"graphNode\"], \n\t     \"PNAME_LN\": [\"graphNode\"], \n\t     \"PNAME_NS\": [\"graphNode\"], \n\t     \"STRING_LITERAL1\": [\"graphNode\"], \n\t     \"STRING_LITERAL2\": [\"graphNode\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \n\t     \"INTEGER\": [\"graphNode\"], \n\t     \"DECIMAL\": [\"graphNode\"], \n\t     \"DOUBLE\": [\"graphNode\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNode\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNode\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNode\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNode\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNode\"]}, \n\t  \"objectList\" : {\n\t     \"(\": [\"object\",\"*[,,object]\"], \n\t     \"[\": [\"object\",\"*[,,object]\"], \n\t     \"VAR1\": [\"object\",\"*[,,object]\"], \n\t     \"VAR2\": [\"object\",\"*[,,object]\"], \n\t     \"NIL\": [\"object\",\"*[,,object]\"], \n\t     \"IRI_REF\": [\"object\",\"*[,,object]\"], \n\t     \"TRUE\": [\"object\",\"*[,,object]\"], \n\t     \"FALSE\": [\"object\",\"*[,,object]\"], \n\t     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \n\t     \"ANON\": [\"object\",\"*[,,object]\"], \n\t     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \n\t     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \n\t     \"INTEGER\": [\"object\",\"*[,,object]\"], \n\t     \"DECIMAL\": [\"object\",\"*[,,object]\"], \n\t     \"DOUBLE\": [\"object\",\"*[,,object]\"], \n\t     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \n\t     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"]}, \n\t  \"objectListPath\" : {\n\t     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"]}, \n\t  \"objectPath\" : {\n\t     \"(\": [\"graphNodePath\"], \n\t     \"[\": [\"graphNodePath\"], \n\t     \"VAR1\": [\"graphNodePath\"], \n\t     \"VAR2\": [\"graphNodePath\"], \n\t     \"NIL\": [\"graphNodePath\"], \n\t     \"IRI_REF\": [\"graphNodePath\"], \n\t     \"TRUE\": [\"graphNodePath\"], \n\t     \"FALSE\": [\"graphNodePath\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \n\t     \"ANON\": [\"graphNodePath\"], \n\t     \"PNAME_LN\": [\"graphNodePath\"], \n\t     \"PNAME_NS\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL1\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL2\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \n\t     \"INTEGER\": [\"graphNodePath\"], \n\t     \"DECIMAL\": [\"graphNodePath\"], \n\t     \"DOUBLE\": [\"graphNodePath\"], \n\t     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"]}, \n\t  \"offsetClause\" : {\n\t     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \n\t  \"optionalGraphPattern\" : {\n\t     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \n\t  \"or([*,expression])\" : {\n\t     \"*\": [\"*\"], \n\t     \"!\": [\"expression\"], \n\t     \"+\": [\"expression\"], \n\t     \"-\": [\"expression\"], \n\t     \"VAR1\": [\"expression\"], \n\t     \"VAR2\": [\"expression\"], \n\t     \"(\": [\"expression\"], \n\t     \"STR\": [\"expression\"], \n\t     \"LANG\": [\"expression\"], \n\t     \"LANGMATCHES\": [\"expression\"], \n\t     \"DATATYPE\": [\"expression\"], \n\t     \"BOUND\": [\"expression\"], \n\t     \"IRI\": [\"expression\"], \n\t     \"URI\": [\"expression\"], \n\t     \"BNODE\": [\"expression\"], \n\t     \"RAND\": [\"expression\"], \n\t     \"ABS\": [\"expression\"], \n\t     \"CEIL\": [\"expression\"], \n\t     \"FLOOR\": [\"expression\"], \n\t     \"ROUND\": [\"expression\"], \n\t     \"CONCAT\": [\"expression\"], \n\t     \"STRLEN\": [\"expression\"], \n\t     \"UCASE\": [\"expression\"], \n\t     \"LCASE\": [\"expression\"], \n\t     \"ENCODE_FOR_URI\": [\"expression\"], \n\t     \"CONTAINS\": [\"expression\"], \n\t     \"STRSTARTS\": [\"expression\"], \n\t     \"STRENDS\": [\"expression\"], \n\t     \"STRBEFORE\": [\"expression\"], \n\t     \"STRAFTER\": [\"expression\"], \n\t     \"YEAR\": [\"expression\"], \n\t     \"MONTH\": [\"expression\"], \n\t     \"DAY\": [\"expression\"], \n\t     \"HOURS\": [\"expression\"], \n\t     \"MINUTES\": [\"expression\"], \n\t     \"SECONDS\": [\"expression\"], \n\t     \"TIMEZONE\": [\"expression\"], \n\t     \"TZ\": [\"expression\"], \n\t     \"NOW\": [\"expression\"], \n\t     \"UUID\": [\"expression\"], \n\t     \"STRUUID\": [\"expression\"], \n\t     \"MD5\": [\"expression\"], \n\t     \"SHA1\": [\"expression\"], \n\t     \"SHA256\": [\"expression\"], \n\t     \"SHA384\": [\"expression\"], \n\t     \"SHA512\": [\"expression\"], \n\t     \"COALESCE\": [\"expression\"], \n\t     \"IF\": [\"expression\"], \n\t     \"STRLANG\": [\"expression\"], \n\t     \"STRDT\": [\"expression\"], \n\t     \"SAMETERM\": [\"expression\"], \n\t     \"ISIRI\": [\"expression\"], \n\t     \"ISURI\": [\"expression\"], \n\t     \"ISBLANK\": [\"expression\"], \n\t     \"ISLITERAL\": [\"expression\"], \n\t     \"ISNUMERIC\": [\"expression\"], \n\t     \"TRUE\": [\"expression\"], \n\t     \"FALSE\": [\"expression\"], \n\t     \"COUNT\": [\"expression\"], \n\t     \"SUM\": [\"expression\"], \n\t     \"MIN\": [\"expression\"], \n\t     \"MAX\": [\"expression\"], \n\t     \"AVG\": [\"expression\"], \n\t     \"SAMPLE\": [\"expression\"], \n\t     \"GROUP_CONCAT\": [\"expression\"], \n\t     \"SUBSTR\": [\"expression\"], \n\t     \"REPLACE\": [\"expression\"], \n\t     \"REGEX\": [\"expression\"], \n\t     \"EXISTS\": [\"expression\"], \n\t     \"NOT\": [\"expression\"], \n\t     \"IRI_REF\": [\"expression\"], \n\t     \"STRING_LITERAL1\": [\"expression\"], \n\t     \"STRING_LITERAL2\": [\"expression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"expression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"expression\"], \n\t     \"INTEGER\": [\"expression\"], \n\t     \"DECIMAL\": [\"expression\"], \n\t     \"DOUBLE\": [\"expression\"], \n\t     \"INTEGER_POSITIVE\": [\"expression\"], \n\t     \"DECIMAL_POSITIVE\": [\"expression\"], \n\t     \"DOUBLE_POSITIVE\": [\"expression\"], \n\t     \"INTEGER_NEGATIVE\": [\"expression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"expression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"expression\"], \n\t     \"PNAME_LN\": [\"expression\"], \n\t     \"PNAME_NS\": [\"expression\"]}, \n\t  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\n\t     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n\t     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n\t     \"*\": [\"*\"]}, \n\t  \"or([+varOrIRIref,*])\" : {\n\t     \"VAR1\": [\"+varOrIRIref\"], \n\t     \"VAR2\": [\"+varOrIRIref\"], \n\t     \"IRI_REF\": [\"+varOrIRIref\"], \n\t     \"PNAME_LN\": [\"+varOrIRIref\"], \n\t     \"PNAME_NS\": [\"+varOrIRIref\"], \n\t     \"*\": [\"*\"]}, \n\t  \"or([ASC,DESC])\" : {\n\t     \"ASC\": [\"ASC\"], \n\t     \"DESC\": [\"DESC\"]}, \n\t  \"or([DISTINCT,REDUCED])\" : {\n\t     \"DISTINCT\": [\"DISTINCT\"], \n\t     \"REDUCED\": [\"REDUCED\"]}, \n\t  \"or([LANGTAG,[^^,iriRef]])\" : {\n\t     \"LANGTAG\": [\"LANGTAG\"], \n\t     \"^^\": [\"[^^,iriRef]\"]}, \n\t  \"or([NIL,[ (,*var,)]])\" : {\n\t     \"NIL\": [\"NIL\"], \n\t     \"(\": [\"[ (,*var,)]\"]}, \n\t  \"or([[ (,*dataBlockValue,)],NIL])\" : {\n\t     \"(\": [\"[ (,*dataBlockValue,)]\"], \n\t     \"NIL\": [\"NIL\"]}, \n\t  \"or([[ (,expression,)],NIL])\" : {\n\t     \"(\": [\"[ (,expression,)]\"], \n\t     \"NIL\": [\"NIL\"]}, \n\t  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\n\t     \"*\": [\"[*,unaryExpression]\"], \n\t     \"/\": [\"[/,unaryExpression]\"]}, \n\t  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n\t     \"+\": [\"[+,multiplicativeExpression]\"], \n\t     \"-\": [\"[-,multiplicativeExpression]\"], \n\t     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \n\t  \"or([[,,or([},[integer,}]])],}])\" : {\n\t     \",\": [\"[,,or([},[integer,}]])]\"], \n\t     \"}\": [\"}\"]}, \n\t  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n\t     \"=\": [\"[=,numericExpression]\"], \n\t     \"!=\": [\"[!=,numericExpression]\"], \n\t     \"<\": [\"[<,numericExpression]\"], \n\t     \">\": [\"[>,numericExpression]\"], \n\t     \"<=\": [\"[<=,numericExpression]\"], \n\t     \">=\": [\"[>=,numericExpression]\"], \n\t     \"IN\": [\"[IN,expressionList]\"], \n\t     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \n\t  \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\" : {\n\t     \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"], \n\t     \"WHERE\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"], \n\t     \"FROM\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]}, \n\t  \"or([[deleteClause,?insertClause],insertClause])\" : {\n\t     \"DELETE\": [\"[deleteClause,?insertClause]\"], \n\t     \"INSERT\": [\"insertClause\"]}, \n\t  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\n\t     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \n\t     \",\": [\"[,,integer,}]\"]}, \n\t  \"or([defaultGraphClause,namedGraphClause])\" : {\n\t     \"IRI_REF\": [\"defaultGraphClause\"], \n\t     \"PNAME_LN\": [\"defaultGraphClause\"], \n\t     \"PNAME_NS\": [\"defaultGraphClause\"], \n\t     \"NAMED\": [\"namedGraphClause\"]}, \n\t  \"or([inlineDataOneVar,inlineDataFull])\" : {\n\t     \"VAR1\": [\"inlineDataOneVar\"], \n\t     \"VAR2\": [\"inlineDataOneVar\"], \n\t     \"NIL\": [\"inlineDataFull\"], \n\t     \"(\": [\"inlineDataFull\"]}, \n\t  \"or([iriRef,[NAMED,iriRef]])\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"NAMED\": [\"[NAMED,iriRef]\"]}, \n\t  \"or([iriRef,a])\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"a\": [\"a\"]}, \n\t  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\n\t     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n\t  \"or([queryAll,updateAll])\" : {\n\t     \"CONSTRUCT\": [\"queryAll\"], \n\t     \"DESCRIBE\": [\"queryAll\"], \n\t     \"ASK\": [\"queryAll\"], \n\t     \"SELECT\": [\"queryAll\"], \n\t     \"INSERT\": [\"updateAll\"], \n\t     \"DELETE\": [\"updateAll\"], \n\t     \"LOAD\": [\"updateAll\"], \n\t     \"CLEAR\": [\"updateAll\"], \n\t     \"DROP\": [\"updateAll\"], \n\t     \"ADD\": [\"updateAll\"], \n\t     \"MOVE\": [\"updateAll\"], \n\t     \"COPY\": [\"updateAll\"], \n\t     \"CREATE\": [\"updateAll\"], \n\t     \"WITH\": [\"updateAll\"], \n\t     \"$\": [\"updateAll\"]}, \n\t  \"or([selectQuery,constructQuery,describeQuery,askQuery])\" : {\n\t     \"SELECT\": [\"selectQuery\"], \n\t     \"CONSTRUCT\": [\"constructQuery\"], \n\t     \"DESCRIBE\": [\"describeQuery\"], \n\t     \"ASK\": [\"askQuery\"]}, \n\t  \"or([subSelect,groupGraphPatternSub])\" : {\n\t     \"SELECT\": [\"subSelect\"], \n\t     \"{\": [\"groupGraphPatternSub\"], \n\t     \"OPTIONAL\": [\"groupGraphPatternSub\"], \n\t     \"MINUS\": [\"groupGraphPatternSub\"], \n\t     \"GRAPH\": [\"groupGraphPatternSub\"], \n\t     \"SERVICE\": [\"groupGraphPatternSub\"], \n\t     \"FILTER\": [\"groupGraphPatternSub\"], \n\t     \"BIND\": [\"groupGraphPatternSub\"], \n\t     \"VALUES\": [\"groupGraphPatternSub\"], \n\t     \"VAR1\": [\"groupGraphPatternSub\"], \n\t     \"VAR2\": [\"groupGraphPatternSub\"], \n\t     \"NIL\": [\"groupGraphPatternSub\"], \n\t     \"(\": [\"groupGraphPatternSub\"], \n\t     \"[\": [\"groupGraphPatternSub\"], \n\t     \"IRI_REF\": [\"groupGraphPatternSub\"], \n\t     \"TRUE\": [\"groupGraphPatternSub\"], \n\t     \"FALSE\": [\"groupGraphPatternSub\"], \n\t     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \n\t     \"ANON\": [\"groupGraphPatternSub\"], \n\t     \"PNAME_LN\": [\"groupGraphPatternSub\"], \n\t     \"PNAME_NS\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \n\t     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \n\t     \"INTEGER\": [\"groupGraphPatternSub\"], \n\t     \"DECIMAL\": [\"groupGraphPatternSub\"], \n\t     \"DOUBLE\": [\"groupGraphPatternSub\"], \n\t     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \n\t     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \n\t     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \n\t     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \n\t     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \n\t     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \n\t     \"}\": [\"groupGraphPatternSub\"]}, \n\t  \"or([var,[ (,expression,AS,var,)]])\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"(\": [\"[ (,expression,AS,var,)]\"]}, \n\t  \"or([verbPath,verbSimple])\" : {\n\t     \"^\": [\"verbPath\"], \n\t     \"a\": [\"verbPath\"], \n\t     \"!\": [\"verbPath\"], \n\t     \"(\": [\"verbPath\"], \n\t     \"IRI_REF\": [\"verbPath\"], \n\t     \"PNAME_LN\": [\"verbPath\"], \n\t     \"PNAME_NS\": [\"verbPath\"], \n\t     \"VAR1\": [\"verbSimple\"], \n\t     \"VAR2\": [\"verbSimple\"]}, \n\t  \"or([},[integer,}]])\" : {\n\t     \"}\": [\"}\"], \n\t     \"INTEGER\": [\"[integer,}]\"]}, \n\t  \"orderClause\" : {\n\t     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \n\t  \"orderCondition\" : {\n\t     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n\t     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n\t     \"(\": [\"constraint\"], \n\t     \"STR\": [\"constraint\"], \n\t     \"LANG\": [\"constraint\"], \n\t     \"LANGMATCHES\": [\"constraint\"], \n\t     \"DATATYPE\": [\"constraint\"], \n\t     \"BOUND\": [\"constraint\"], \n\t     \"IRI\": [\"constraint\"], \n\t     \"URI\": [\"constraint\"], \n\t     \"BNODE\": [\"constraint\"], \n\t     \"RAND\": [\"constraint\"], \n\t     \"ABS\": [\"constraint\"], \n\t     \"CEIL\": [\"constraint\"], \n\t     \"FLOOR\": [\"constraint\"], \n\t     \"ROUND\": [\"constraint\"], \n\t     \"CONCAT\": [\"constraint\"], \n\t     \"STRLEN\": [\"constraint\"], \n\t     \"UCASE\": [\"constraint\"], \n\t     \"LCASE\": [\"constraint\"], \n\t     \"ENCODE_FOR_URI\": [\"constraint\"], \n\t     \"CONTAINS\": [\"constraint\"], \n\t     \"STRSTARTS\": [\"constraint\"], \n\t     \"STRENDS\": [\"constraint\"], \n\t     \"STRBEFORE\": [\"constraint\"], \n\t     \"STRAFTER\": [\"constraint\"], \n\t     \"YEAR\": [\"constraint\"], \n\t     \"MONTH\": [\"constraint\"], \n\t     \"DAY\": [\"constraint\"], \n\t     \"HOURS\": [\"constraint\"], \n\t     \"MINUTES\": [\"constraint\"], \n\t     \"SECONDS\": [\"constraint\"], \n\t     \"TIMEZONE\": [\"constraint\"], \n\t     \"TZ\": [\"constraint\"], \n\t     \"NOW\": [\"constraint\"], \n\t     \"UUID\": [\"constraint\"], \n\t     \"STRUUID\": [\"constraint\"], \n\t     \"MD5\": [\"constraint\"], \n\t     \"SHA1\": [\"constraint\"], \n\t     \"SHA256\": [\"constraint\"], \n\t     \"SHA384\": [\"constraint\"], \n\t     \"SHA512\": [\"constraint\"], \n\t     \"COALESCE\": [\"constraint\"], \n\t     \"IF\": [\"constraint\"], \n\t     \"STRLANG\": [\"constraint\"], \n\t     \"STRDT\": [\"constraint\"], \n\t     \"SAMETERM\": [\"constraint\"], \n\t     \"ISIRI\": [\"constraint\"], \n\t     \"ISURI\": [\"constraint\"], \n\t     \"ISBLANK\": [\"constraint\"], \n\t     \"ISLITERAL\": [\"constraint\"], \n\t     \"ISNUMERIC\": [\"constraint\"], \n\t     \"SUBSTR\": [\"constraint\"], \n\t     \"REPLACE\": [\"constraint\"], \n\t     \"REGEX\": [\"constraint\"], \n\t     \"EXISTS\": [\"constraint\"], \n\t     \"NOT\": [\"constraint\"], \n\t     \"IRI_REF\": [\"constraint\"], \n\t     \"PNAME_LN\": [\"constraint\"], \n\t     \"PNAME_NS\": [\"constraint\"], \n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"]}, \n\t  \"path\" : {\n\t     \"^\": [\"pathAlternative\"], \n\t     \"a\": [\"pathAlternative\"], \n\t     \"!\": [\"pathAlternative\"], \n\t     \"(\": [\"pathAlternative\"], \n\t     \"IRI_REF\": [\"pathAlternative\"], \n\t     \"PNAME_LN\": [\"pathAlternative\"], \n\t     \"PNAME_NS\": [\"pathAlternative\"]}, \n\t  \"pathAlternative\" : {\n\t     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \n\t     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \n\t  \"pathElt\" : {\n\t     \"a\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"!\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"(\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \n\t     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \n\t  \"pathEltOrInverse\" : {\n\t     \"a\": [\"pathElt\"], \n\t     \"!\": [\"pathElt\"], \n\t     \"(\": [\"pathElt\"], \n\t     \"IRI_REF\": [\"pathElt\"], \n\t     \"PNAME_LN\": [\"pathElt\"], \n\t     \"PNAME_NS\": [\"pathElt\"], \n\t     \"^\": [\"^\",\"pathElt\"]}, \n\t  \"pathMod\" : {\n\t     \"*\": [\"*\"], \n\t     \"?\": [\"?\"], \n\t     \"+\": [\"+\"], \n\t     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \n\t  \"pathNegatedPropertySet\" : {\n\t     \"a\": [\"pathOneInPropertySet\"], \n\t     \"^\": [\"pathOneInPropertySet\"], \n\t     \"IRI_REF\": [\"pathOneInPropertySet\"], \n\t     \"PNAME_LN\": [\"pathOneInPropertySet\"], \n\t     \"PNAME_NS\": [\"pathOneInPropertySet\"], \n\t     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \n\t  \"pathOneInPropertySet\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"], \n\t     \"a\": [\"a\"], \n\t     \"^\": [\"^\",\"or([iriRef,a])\"]}, \n\t  \"pathPrimary\" : {\n\t     \"IRI_REF\": [\"storeProperty\",\"iriRef\"], \n\t     \"PNAME_LN\": [\"storeProperty\",\"iriRef\"], \n\t     \"PNAME_NS\": [\"storeProperty\",\"iriRef\"], \n\t     \"a\": [\"storeProperty\",\"a\"], \n\t     \"!\": [\"!\",\"pathNegatedPropertySet\"], \n\t     \"(\": [\"(\",\"path\",\")\"]}, \n\t  \"pathSequence\" : {\n\t     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n\t     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \n\t  \"prefixDecl\" : {\n\t     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \n\t  \"prefixedName\" : {\n\t     \"PNAME_LN\": [\"PNAME_LN\"], \n\t     \"PNAME_NS\": [\"PNAME_NS\"]}, \n\t  \"primaryExpression\" : {\n\t     \"(\": [\"brackettedExpression\"], \n\t     \"STR\": [\"builtInCall\"], \n\t     \"LANG\": [\"builtInCall\"], \n\t     \"LANGMATCHES\": [\"builtInCall\"], \n\t     \"DATATYPE\": [\"builtInCall\"], \n\t     \"BOUND\": [\"builtInCall\"], \n\t     \"IRI\": [\"builtInCall\"], \n\t     \"URI\": [\"builtInCall\"], \n\t     \"BNODE\": [\"builtInCall\"], \n\t     \"RAND\": [\"builtInCall\"], \n\t     \"ABS\": [\"builtInCall\"], \n\t     \"CEIL\": [\"builtInCall\"], \n\t     \"FLOOR\": [\"builtInCall\"], \n\t     \"ROUND\": [\"builtInCall\"], \n\t     \"CONCAT\": [\"builtInCall\"], \n\t     \"STRLEN\": [\"builtInCall\"], \n\t     \"UCASE\": [\"builtInCall\"], \n\t     \"LCASE\": [\"builtInCall\"], \n\t     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n\t     \"CONTAINS\": [\"builtInCall\"], \n\t     \"STRSTARTS\": [\"builtInCall\"], \n\t     \"STRENDS\": [\"builtInCall\"], \n\t     \"STRBEFORE\": [\"builtInCall\"], \n\t     \"STRAFTER\": [\"builtInCall\"], \n\t     \"YEAR\": [\"builtInCall\"], \n\t     \"MONTH\": [\"builtInCall\"], \n\t     \"DAY\": [\"builtInCall\"], \n\t     \"HOURS\": [\"builtInCall\"], \n\t     \"MINUTES\": [\"builtInCall\"], \n\t     \"SECONDS\": [\"builtInCall\"], \n\t     \"TIMEZONE\": [\"builtInCall\"], \n\t     \"TZ\": [\"builtInCall\"], \n\t     \"NOW\": [\"builtInCall\"], \n\t     \"UUID\": [\"builtInCall\"], \n\t     \"STRUUID\": [\"builtInCall\"], \n\t     \"MD5\": [\"builtInCall\"], \n\t     \"SHA1\": [\"builtInCall\"], \n\t     \"SHA256\": [\"builtInCall\"], \n\t     \"SHA384\": [\"builtInCall\"], \n\t     \"SHA512\": [\"builtInCall\"], \n\t     \"COALESCE\": [\"builtInCall\"], \n\t     \"IF\": [\"builtInCall\"], \n\t     \"STRLANG\": [\"builtInCall\"], \n\t     \"STRDT\": [\"builtInCall\"], \n\t     \"SAMETERM\": [\"builtInCall\"], \n\t     \"ISIRI\": [\"builtInCall\"], \n\t     \"ISURI\": [\"builtInCall\"], \n\t     \"ISBLANK\": [\"builtInCall\"], \n\t     \"ISLITERAL\": [\"builtInCall\"], \n\t     \"ISNUMERIC\": [\"builtInCall\"], \n\t     \"SUBSTR\": [\"builtInCall\"], \n\t     \"REPLACE\": [\"builtInCall\"], \n\t     \"REGEX\": [\"builtInCall\"], \n\t     \"EXISTS\": [\"builtInCall\"], \n\t     \"NOT\": [\"builtInCall\"], \n\t     \"IRI_REF\": [\"iriRefOrFunction\"], \n\t     \"PNAME_LN\": [\"iriRefOrFunction\"], \n\t     \"PNAME_NS\": [\"iriRefOrFunction\"], \n\t     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n\t     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n\t     \"INTEGER\": [\"numericLiteral\"], \n\t     \"DECIMAL\": [\"numericLiteral\"], \n\t     \"DOUBLE\": [\"numericLiteral\"], \n\t     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n\t     \"TRUE\": [\"booleanLiteral\"], \n\t     \"FALSE\": [\"booleanLiteral\"], \n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"COUNT\": [\"aggregate\"], \n\t     \"SUM\": [\"aggregate\"], \n\t     \"MIN\": [\"aggregate\"], \n\t     \"MAX\": [\"aggregate\"], \n\t     \"AVG\": [\"aggregate\"], \n\t     \"SAMPLE\": [\"aggregate\"], \n\t     \"GROUP_CONCAT\": [\"aggregate\"]}, \n\t  \"prologue\" : {\n\t     \"PREFIX\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"BASE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"$\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"CONSTRUCT\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"DESCRIBE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"ASK\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"INSERT\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"DELETE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"SELECT\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"LOAD\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"CLEAR\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"DROP\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"ADD\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"MOVE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"COPY\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"CREATE\": [\"?baseDecl\",\"*prefixDecl\"], \n\t     \"WITH\": [\"?baseDecl\",\"*prefixDecl\"]}, \n\t  \"propertyList\" : {\n\t     \"a\": [\"propertyListNotEmpty\"], \n\t     \"VAR1\": [\"propertyListNotEmpty\"], \n\t     \"VAR2\": [\"propertyListNotEmpty\"], \n\t     \"IRI_REF\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n\t     \".\": [], \n\t     \"}\": [], \n\t     \"GRAPH\": []}, \n\t  \"propertyListNotEmpty\" : {\n\t     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n\t     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \n\t  \"propertyListPath\" : {\n\t     \"a\": [\"propertyListNotEmpty\"], \n\t     \"VAR1\": [\"propertyListNotEmpty\"], \n\t     \"VAR2\": [\"propertyListNotEmpty\"], \n\t     \"IRI_REF\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n\t     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n\t     \".\": [], \n\t     \"{\": [], \n\t     \"OPTIONAL\": [], \n\t     \"MINUS\": [], \n\t     \"GRAPH\": [], \n\t     \"SERVICE\": [], \n\t     \"FILTER\": [], \n\t     \"BIND\": [], \n\t     \"VALUES\": [], \n\t     \"}\": []}, \n\t  \"propertyListPathNotEmpty\" : {\n\t     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n\t     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \n\t  \"quadData\" : {\n\t     \"{\": [\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]}, \n\t  \"quadDataNoBnodes\" : {\n\t     \"{\": [\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]}, \n\t  \"quadPattern\" : {\n\t     \"{\": [\"{\",\"quads\",\"}\"]}, \n\t  \"quadPatternNoBnodes\" : {\n\t     \"{\": [\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]}, \n\t  \"quads\" : {\n\t     \"GRAPH\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"VAR1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"VAR2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"NIL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"(\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"[\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"IRI_REF\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"TRUE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"FALSE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"BLANK_NODE_LABEL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"ANON\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"PNAME_LN\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"PNAME_NS\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"INTEGER\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DECIMAL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DOUBLE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"INTEGER_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DECIMAL_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DOUBLE_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"INTEGER_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n\t     \"}\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]}, \n\t  \"quadsNotTriples\" : {\n\t     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]}, \n\t  \"queryAll\" : {\n\t     \"CONSTRUCT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n\t     \"DESCRIBE\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n\t     \"ASK\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n\t     \"SELECT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]}, \n\t  \"rdfLiteral\" : {\n\t     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n\t     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \n\t  \"regexExpression\" : {\n\t     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n\t  \"relationalExpression\" : {\n\t     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n\t     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \n\t  \"selectClause\" : {\n\t     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \n\t  \"selectQuery\" : {\n\t     \"SELECT\": [\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n\t  \"serviceGraphPattern\" : {\n\t     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n\t  \"solutionModifier\" : {\n\t     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n\t     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \n\t  \"sourceSelector\" : {\n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"]}, \n\t  \"sparql11\" : {\n\t     \"$\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"CONSTRUCT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"DESCRIBE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"ASK\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"INSERT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"DELETE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"SELECT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"LOAD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"CLEAR\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"DROP\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"ADD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"MOVE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"COPY\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"CREATE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"WITH\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"PREFIX\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n\t     \"BASE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"]}, \n\t  \"storeProperty\" : {\n\t     \"VAR1\": [], \n\t     \"VAR2\": [], \n\t     \"IRI_REF\": [], \n\t     \"PNAME_LN\": [], \n\t     \"PNAME_NS\": [], \n\t     \"a\": []}, \n\t  \"strReplaceExpression\" : {\n\t     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n\t  \"string\" : {\n\t     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n\t     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n\t     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n\t     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \n\t  \"subSelect\" : {\n\t     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \n\t  \"substringExpression\" : {\n\t     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n\t  \"triplesBlock\" : {\n\t     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \n\t  \"triplesNode\" : {\n\t     \"(\": [\"collection\"], \n\t     \"[\": [\"blankNodePropertyList\"]}, \n\t  \"triplesNodePath\" : {\n\t     \"(\": [\"collectionPath\"], \n\t     \"[\": [\"blankNodePropertyListPath\"]}, \n\t  \"triplesSameSubject\" : {\n\t     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n\t     \"(\": [\"triplesNode\",\"propertyList\"], \n\t     \"[\": [\"triplesNode\",\"propertyList\"]}, \n\t  \"triplesSameSubjectPath\" : {\n\t     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n\t     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \n\t     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \n\t  \"triplesTemplate\" : {\n\t     \"VAR1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"VAR2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"NIL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"(\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"[\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"TRUE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"FALSE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"ANON\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n\t     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]}, \n\t  \"unaryExpression\" : {\n\t     \"!\": [\"!\",\"primaryExpression\"], \n\t     \"+\": [\"+\",\"primaryExpression\"], \n\t     \"-\": [\"-\",\"primaryExpression\"], \n\t     \"VAR1\": [\"primaryExpression\"], \n\t     \"VAR2\": [\"primaryExpression\"], \n\t     \"(\": [\"primaryExpression\"], \n\t     \"STR\": [\"primaryExpression\"], \n\t     \"LANG\": [\"primaryExpression\"], \n\t     \"LANGMATCHES\": [\"primaryExpression\"], \n\t     \"DATATYPE\": [\"primaryExpression\"], \n\t     \"BOUND\": [\"primaryExpression\"], \n\t     \"IRI\": [\"primaryExpression\"], \n\t     \"URI\": [\"primaryExpression\"], \n\t     \"BNODE\": [\"primaryExpression\"], \n\t     \"RAND\": [\"primaryExpression\"], \n\t     \"ABS\": [\"primaryExpression\"], \n\t     \"CEIL\": [\"primaryExpression\"], \n\t     \"FLOOR\": [\"primaryExpression\"], \n\t     \"ROUND\": [\"primaryExpression\"], \n\t     \"CONCAT\": [\"primaryExpression\"], \n\t     \"STRLEN\": [\"primaryExpression\"], \n\t     \"UCASE\": [\"primaryExpression\"], \n\t     \"LCASE\": [\"primaryExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \n\t     \"CONTAINS\": [\"primaryExpression\"], \n\t     \"STRSTARTS\": [\"primaryExpression\"], \n\t     \"STRENDS\": [\"primaryExpression\"], \n\t     \"STRBEFORE\": [\"primaryExpression\"], \n\t     \"STRAFTER\": [\"primaryExpression\"], \n\t     \"YEAR\": [\"primaryExpression\"], \n\t     \"MONTH\": [\"primaryExpression\"], \n\t     \"DAY\": [\"primaryExpression\"], \n\t     \"HOURS\": [\"primaryExpression\"], \n\t     \"MINUTES\": [\"primaryExpression\"], \n\t     \"SECONDS\": [\"primaryExpression\"], \n\t     \"TIMEZONE\": [\"primaryExpression\"], \n\t     \"TZ\": [\"primaryExpression\"], \n\t     \"NOW\": [\"primaryExpression\"], \n\t     \"UUID\": [\"primaryExpression\"], \n\t     \"STRUUID\": [\"primaryExpression\"], \n\t     \"MD5\": [\"primaryExpression\"], \n\t     \"SHA1\": [\"primaryExpression\"], \n\t     \"SHA256\": [\"primaryExpression\"], \n\t     \"SHA384\": [\"primaryExpression\"], \n\t     \"SHA512\": [\"primaryExpression\"], \n\t     \"COALESCE\": [\"primaryExpression\"], \n\t     \"IF\": [\"primaryExpression\"], \n\t     \"STRLANG\": [\"primaryExpression\"], \n\t     \"STRDT\": [\"primaryExpression\"], \n\t     \"SAMETERM\": [\"primaryExpression\"], \n\t     \"ISIRI\": [\"primaryExpression\"], \n\t     \"ISURI\": [\"primaryExpression\"], \n\t     \"ISBLANK\": [\"primaryExpression\"], \n\t     \"ISLITERAL\": [\"primaryExpression\"], \n\t     \"ISNUMERIC\": [\"primaryExpression\"], \n\t     \"TRUE\": [\"primaryExpression\"], \n\t     \"FALSE\": [\"primaryExpression\"], \n\t     \"COUNT\": [\"primaryExpression\"], \n\t     \"SUM\": [\"primaryExpression\"], \n\t     \"MIN\": [\"primaryExpression\"], \n\t     \"MAX\": [\"primaryExpression\"], \n\t     \"AVG\": [\"primaryExpression\"], \n\t     \"SAMPLE\": [\"primaryExpression\"], \n\t     \"GROUP_CONCAT\": [\"primaryExpression\"], \n\t     \"SUBSTR\": [\"primaryExpression\"], \n\t     \"REPLACE\": [\"primaryExpression\"], \n\t     \"REGEX\": [\"primaryExpression\"], \n\t     \"EXISTS\": [\"primaryExpression\"], \n\t     \"NOT\": [\"primaryExpression\"], \n\t     \"IRI_REF\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL1\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL2\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \n\t     \"INTEGER\": [\"primaryExpression\"], \n\t     \"DECIMAL\": [\"primaryExpression\"], \n\t     \"DOUBLE\": [\"primaryExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \n\t     \"PNAME_LN\": [\"primaryExpression\"], \n\t     \"PNAME_NS\": [\"primaryExpression\"]}, \n\t  \"update\" : {\n\t     \"INSERT\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"DELETE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"LOAD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"CLEAR\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"DROP\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"ADD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"MOVE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"COPY\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"CREATE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"WITH\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"PREFIX\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"BASE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n\t     \"$\": [\"prologue\",\"?[update1,?[;,update]]\"]}, \n\t  \"update1\" : {\n\t     \"LOAD\": [\"load\"], \n\t     \"CLEAR\": [\"clear\"], \n\t     \"DROP\": [\"drop\"], \n\t     \"ADD\": [\"add\"], \n\t     \"MOVE\": [\"move\"], \n\t     \"COPY\": [\"copy\"], \n\t     \"CREATE\": [\"create\"], \n\t     \"INSERT\": [\"INSERT\",\"insert1\"], \n\t     \"DELETE\": [\"DELETE\",\"delete1\"], \n\t     \"WITH\": [\"modify\"]}, \n\t  \"updateAll\" : {\n\t     \"INSERT\": [\"?[update1,?[;,update]]\"], \n\t     \"DELETE\": [\"?[update1,?[;,update]]\"], \n\t     \"LOAD\": [\"?[update1,?[;,update]]\"], \n\t     \"CLEAR\": [\"?[update1,?[;,update]]\"], \n\t     \"DROP\": [\"?[update1,?[;,update]]\"], \n\t     \"ADD\": [\"?[update1,?[;,update]]\"], \n\t     \"MOVE\": [\"?[update1,?[;,update]]\"], \n\t     \"COPY\": [\"?[update1,?[;,update]]\"], \n\t     \"CREATE\": [\"?[update1,?[;,update]]\"], \n\t     \"WITH\": [\"?[update1,?[;,update]]\"], \n\t     \"$\": [\"?[update1,?[;,update]]\"]}, \n\t  \"usingClause\" : {\n\t     \"USING\": [\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]}, \n\t  \"valueLogical\" : {\n\t     \"!\": [\"relationalExpression\"], \n\t     \"+\": [\"relationalExpression\"], \n\t     \"-\": [\"relationalExpression\"], \n\t     \"VAR1\": [\"relationalExpression\"], \n\t     \"VAR2\": [\"relationalExpression\"], \n\t     \"(\": [\"relationalExpression\"], \n\t     \"STR\": [\"relationalExpression\"], \n\t     \"LANG\": [\"relationalExpression\"], \n\t     \"LANGMATCHES\": [\"relationalExpression\"], \n\t     \"DATATYPE\": [\"relationalExpression\"], \n\t     \"BOUND\": [\"relationalExpression\"], \n\t     \"IRI\": [\"relationalExpression\"], \n\t     \"URI\": [\"relationalExpression\"], \n\t     \"BNODE\": [\"relationalExpression\"], \n\t     \"RAND\": [\"relationalExpression\"], \n\t     \"ABS\": [\"relationalExpression\"], \n\t     \"CEIL\": [\"relationalExpression\"], \n\t     \"FLOOR\": [\"relationalExpression\"], \n\t     \"ROUND\": [\"relationalExpression\"], \n\t     \"CONCAT\": [\"relationalExpression\"], \n\t     \"STRLEN\": [\"relationalExpression\"], \n\t     \"UCASE\": [\"relationalExpression\"], \n\t     \"LCASE\": [\"relationalExpression\"], \n\t     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \n\t     \"CONTAINS\": [\"relationalExpression\"], \n\t     \"STRSTARTS\": [\"relationalExpression\"], \n\t     \"STRENDS\": [\"relationalExpression\"], \n\t     \"STRBEFORE\": [\"relationalExpression\"], \n\t     \"STRAFTER\": [\"relationalExpression\"], \n\t     \"YEAR\": [\"relationalExpression\"], \n\t     \"MONTH\": [\"relationalExpression\"], \n\t     \"DAY\": [\"relationalExpression\"], \n\t     \"HOURS\": [\"relationalExpression\"], \n\t     \"MINUTES\": [\"relationalExpression\"], \n\t     \"SECONDS\": [\"relationalExpression\"], \n\t     \"TIMEZONE\": [\"relationalExpression\"], \n\t     \"TZ\": [\"relationalExpression\"], \n\t     \"NOW\": [\"relationalExpression\"], \n\t     \"UUID\": [\"relationalExpression\"], \n\t     \"STRUUID\": [\"relationalExpression\"], \n\t     \"MD5\": [\"relationalExpression\"], \n\t     \"SHA1\": [\"relationalExpression\"], \n\t     \"SHA256\": [\"relationalExpression\"], \n\t     \"SHA384\": [\"relationalExpression\"], \n\t     \"SHA512\": [\"relationalExpression\"], \n\t     \"COALESCE\": [\"relationalExpression\"], \n\t     \"IF\": [\"relationalExpression\"], \n\t     \"STRLANG\": [\"relationalExpression\"], \n\t     \"STRDT\": [\"relationalExpression\"], \n\t     \"SAMETERM\": [\"relationalExpression\"], \n\t     \"ISIRI\": [\"relationalExpression\"], \n\t     \"ISURI\": [\"relationalExpression\"], \n\t     \"ISBLANK\": [\"relationalExpression\"], \n\t     \"ISLITERAL\": [\"relationalExpression\"], \n\t     \"ISNUMERIC\": [\"relationalExpression\"], \n\t     \"TRUE\": [\"relationalExpression\"], \n\t     \"FALSE\": [\"relationalExpression\"], \n\t     \"COUNT\": [\"relationalExpression\"], \n\t     \"SUM\": [\"relationalExpression\"], \n\t     \"MIN\": [\"relationalExpression\"], \n\t     \"MAX\": [\"relationalExpression\"], \n\t     \"AVG\": [\"relationalExpression\"], \n\t     \"SAMPLE\": [\"relationalExpression\"], \n\t     \"GROUP_CONCAT\": [\"relationalExpression\"], \n\t     \"SUBSTR\": [\"relationalExpression\"], \n\t     \"REPLACE\": [\"relationalExpression\"], \n\t     \"REGEX\": [\"relationalExpression\"], \n\t     \"EXISTS\": [\"relationalExpression\"], \n\t     \"NOT\": [\"relationalExpression\"], \n\t     \"IRI_REF\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL1\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL2\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \n\t     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \n\t     \"INTEGER\": [\"relationalExpression\"], \n\t     \"DECIMAL\": [\"relationalExpression\"], \n\t     \"DOUBLE\": [\"relationalExpression\"], \n\t     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \n\t     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \n\t     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \n\t     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \n\t     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \n\t     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \n\t     \"PNAME_LN\": [\"relationalExpression\"], \n\t     \"PNAME_NS\": [\"relationalExpression\"]}, \n\t  \"valuesClause\" : {\n\t     \"VALUES\": [\"VALUES\",\"dataBlock\"], \n\t     \"$\": [], \n\t     \"}\": []}, \n\t  \"var\" : {\n\t     \"VAR1\": [\"VAR1\"], \n\t     \"VAR2\": [\"VAR2\"]}, \n\t  \"varOrIRIref\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"IRI_REF\": [\"iriRef\"], \n\t     \"PNAME_LN\": [\"iriRef\"], \n\t     \"PNAME_NS\": [\"iriRef\"]}, \n\t  \"varOrTerm\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"], \n\t     \"NIL\": [\"graphTerm\"], \n\t     \"IRI_REF\": [\"graphTerm\"], \n\t     \"TRUE\": [\"graphTerm\"], \n\t     \"FALSE\": [\"graphTerm\"], \n\t     \"BLANK_NODE_LABEL\": [\"graphTerm\"], \n\t     \"ANON\": [\"graphTerm\"], \n\t     \"PNAME_LN\": [\"graphTerm\"], \n\t     \"PNAME_NS\": [\"graphTerm\"], \n\t     \"STRING_LITERAL1\": [\"graphTerm\"], \n\t     \"STRING_LITERAL2\": [\"graphTerm\"], \n\t     \"STRING_LITERAL_LONG1\": [\"graphTerm\"], \n\t     \"STRING_LITERAL_LONG2\": [\"graphTerm\"], \n\t     \"INTEGER\": [\"graphTerm\"], \n\t     \"DECIMAL\": [\"graphTerm\"], \n\t     \"DOUBLE\": [\"graphTerm\"], \n\t     \"INTEGER_POSITIVE\": [\"graphTerm\"], \n\t     \"DECIMAL_POSITIVE\": [\"graphTerm\"], \n\t     \"DOUBLE_POSITIVE\": [\"graphTerm\"], \n\t     \"INTEGER_NEGATIVE\": [\"graphTerm\"], \n\t     \"DECIMAL_NEGATIVE\": [\"graphTerm\"], \n\t     \"DOUBLE_NEGATIVE\": [\"graphTerm\"]}, \n\t  \"verb\" : {\n\t     \"VAR1\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"VAR2\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"IRI_REF\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"PNAME_LN\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"PNAME_NS\": [\"storeProperty\",\"varOrIRIref\"], \n\t     \"a\": [\"storeProperty\",\"a\"]}, \n\t  \"verbPath\" : {\n\t     \"^\": [\"path\"], \n\t     \"a\": [\"path\"], \n\t     \"!\": [\"path\"], \n\t     \"(\": [\"path\"], \n\t     \"IRI_REF\": [\"path\"], \n\t     \"PNAME_LN\": [\"path\"], \n\t     \"PNAME_NS\": [\"path\"]}, \n\t  \"verbSimple\" : {\n\t     \"VAR1\": [\"var\"], \n\t     \"VAR2\": [\"var\"]}, \n\t  \"whereClause\" : {\n\t     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \n\t     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}\n\t};\n\t\n\tvar keywords=/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ;\n\t\n\tvar punct=/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ;\n\t\n\tvar defaultQueryType=null;\n\tvar lexVersion=\"sparql11\";\n\tvar startSymbol=\"sparql11\";\n\tvar acceptEmpty=true;\n\t\n\t\tfunction getTerminals()\n\t\t{\n\t\t\tvar IRI_REF = '<[^<>\\\"\\'\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n\t\t\t/*\n\t\t\t * PN_CHARS_BASE =\n\t\t\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\n\t\t\t */\n\t\n\t\t\tvar PN_CHARS_BASE =\n\t\t\t\t'[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]';\n\t\t\tvar PN_CHARS_U = PN_CHARS_BASE+'|_';\n\t\n\t\t\tvar PN_CHARS= '('+PN_CHARS_U+'|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])';\n\t\t\tvar VARNAME = '('+PN_CHARS_U+'|[0-9])'+\n\t\t\t\t'('+PN_CHARS_U+'|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*';\n\t\t\tvar VAR1 = '\\\\?'+VARNAME;\n\t\t\tvar VAR2 = '\\\\$'+VARNAME;\n\t\n\t\t\tvar PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\n\t\n\t\t\tvar HEX= '[0-9A-Fa-f]';\n\t\t\tvar PERCENT='(%'+HEX+HEX+')';\n\t\t\tvar PN_LOCAL_ESC='(\\\\\\\\[_~\\\\.\\\\-!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])';\n\t\t\tvar PLX= '('+PERCENT+'|'+PN_LOCAL_ESC+')';\n\t\t\tvar PN_LOCAL;\n\t\t\tvar BLANK_NODE_LABEL;\n\t\t\tif (lexVersion==\"sparql11\") {\n\t\t\t\tPN_LOCAL= '('+PN_CHARS_U+'|:|[0-9]|'+PLX+')(('+PN_CHARS+'|\\\\.|:|'+PLX+')*('+PN_CHARS+'|:|'+PLX+'))?';\n\t\t\t\tBLANK_NODE_LABEL = '_:('+PN_CHARS_U+'|[0-9])(('+PN_CHARS+'|\\\\.)*'+PN_CHARS+')?';\n\t\t\t} else {\n\t\t\t\tPN_LOCAL= '('+PN_CHARS_U+'|[0-9])((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\n\t\t\t\tBLANK_NODE_LABEL = '_:'+PN_LOCAL;\n\t\t\t}\n\t\t\tvar PNAME_NS = '('+PN_PREFIX+')?:';\n\t\t\tvar PNAME_LN = PNAME_NS+PN_LOCAL;\n\t\t\tvar LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';\n\t\n\t\t\tvar EXPONENT = '[eE][\\\\+-]?[0-9]+';\n\t\t\tvar INTEGER = '[0-9]+';\n\t\t\tvar DECIMAL = '(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))';\n\t\t\tvar DOUBLE =\n\t\t\t\t'(([0-9]+\\\\.[0-9]*'+EXPONENT+')|'+\n\t\t\t\t'(\\\\.[0-9]+'+EXPONENT+')|'+\n\t\t\t\t'([0-9]+'+EXPONENT+'))';\n\t\n\t\t\tvar INTEGER_POSITIVE = '\\\\+' + INTEGER;\n\t\t\tvar DECIMAL_POSITIVE = '\\\\+' + DECIMAL;\n\t\t\tvar DOUBLE_POSITIVE  = '\\\\+' + DOUBLE;\n\t\t\tvar INTEGER_NEGATIVE = '-' + INTEGER;\n\t\t\tvar DECIMAL_NEGATIVE = '-' + DECIMAL;\n\t\t\tvar DOUBLE_NEGATIVE  = '-' + DOUBLE;\n\t\n\t\t\t// var ECHAR = '\\\\\\\\[tbnrf\\\\\"\\\\\\']';\n\t\t\tvar ECHAR = '\\\\\\\\[tbnrf\\\\\\\\\"\\']';\n\t\n\t\t\tvar STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+ECHAR+\")*'\";\n\t\t\tvar STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+ECHAR+')*\"';\n\t\n\t\t\tvar STRING_LITERAL_LONG1 = \"'''(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"))*'''\";\n\t\t\tvar STRING_LITERAL_LONG2 = '\"\"\"((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'))*\"\"\"';\n\t\n\t\t\tvar WS    =        '[\\\\x20\\\\x09\\\\x0D\\\\x0A]';\n\t\t\t// Careful! Code mirror feeds one line at a time with no \\n\n\t\t\t// ... but otherwise comment is terminated by \\n\n\t\t\tvar COMMENT = '#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)';\n\t\t\tvar WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';\n\t\t\tvar NIL   = '\\\\('+WS_OR_COMMENT_STAR+'\\\\)';\n\t\t\tvar ANON  = '\\\\['+WS_OR_COMMENT_STAR+'\\\\]';\n\t\n\t\t\tvar terminals=\n\t\t\t\t{\n\t\t\t\t\tterminal: [\n\t\n\t\t\t\t\t\t{ name: \"WS\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+WS+\"+\"),\n\t\t\t\t\t\t\tstyle:\"ws\" },\n\t\n\t\t\t\t\t\t{ name: \"COMMENT\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+COMMENT),\n\t\t\t\t\t\t\tstyle:\"comment\" },\n\t\n\t\t\t\t\t\t{ name: \"IRI_REF\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+IRI_REF),\n\t\t\t\t\t\t\tstyle:\"variable-3\" },\n\t\n\t\t\t\t\t\t{ name: \"VAR1\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+VAR1),\n\t\t\t\t\t\t\tstyle:\"atom\"},\n\t\n\t\t\t\t\t\t{ name: \"VAR2\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+VAR2),\n\t\t\t\t\t\t\tstyle:\"atom\"},\n\t\n\t\t\t\t\t\t{ name: \"LANGTAG\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+LANGTAG),\n\t\t\t\t\t\t\tstyle:\"meta\"},\n\t\n\t\t\t\t\t\t{ name: \"DOUBLE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DECIMAL\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"INTEGER\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DOUBLE_POSITIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE_POSITIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DECIMAL_POSITIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL_POSITIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"INTEGER_POSITIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER_POSITIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DOUBLE_NEGATIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DOUBLE_NEGATIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"DECIMAL_NEGATIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+DECIMAL_NEGATIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"INTEGER_NEGATIVE\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+INTEGER_NEGATIVE),\n\t\t\t\t\t\t\tstyle:\"number\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL_LONG1\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG1),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL_LONG2\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG2),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL1\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL1),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t{ name: \"STRING_LITERAL2\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL2),\n\t\t\t\t\t\t\tstyle:\"string\" },\n\t\n\t\t\t\t\t\t// Enclosed comments won't be highlighted\n\t\t\t\t\t\t{ name: \"NIL\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+NIL),\n\t\t\t\t\t\t\tstyle:\"punc\" },\n\t\n\t\t\t\t\t\t// Enclosed comments won't be highlighted\n\t\t\t\t\t\t{ name: \"ANON\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+ANON),\n\t\t\t\t\t\t\tstyle:\"punc\" },\n\t\n\t\t\t\t\t\t{ name: \"PNAME_LN\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+PNAME_LN),\n\t\t\t\t\t\t\tstyle:\"string-2\" },\n\t\n\t\t\t\t\t\t{ name: \"PNAME_NS\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+PNAME_NS),\n\t\t\t\t\t\t\tstyle:\"string-2\" },\n\t\n\t\t\t\t\t\t{ name: \"BLANK_NODE_LABEL\",\n\t\t\t\t\t\t\tregex:new RegExp(\"^\"+BLANK_NODE_LABEL),\n\t\t\t\t\t\t\tstyle:\"string-2\" }\n\t\t\t\t\t],\n\t\n\t\t\t\t};\n\t\t\treturn terminals;\n\t\t}\n\t\n\t\tfunction getPossibles(symbol)\n\t\t{\n\t\t\tvar possibles=[], possiblesOb=ll1_table[symbol];\n\t\t\tif (possiblesOb!=undefined)\n\t\t\t\tfor (var property in possiblesOb)\n\t\t\t\t\tpossibles.push(property.toString());\n\t\t\telse\n\t\t\t\tpossibles.push(symbol);\n\t\t\treturn possibles;\n\t\t}\n\t\n\t\tvar tms= getTerminals();\n\t\tvar terminal=tms.terminal;\n\t\n\t\tfunction tokenBase(stream, state) {\n\t\n\t\t\tfunction nextToken() {\n\t\n\t\t\t\tvar consumed=null;\n\t\t\t\t// Tokens defined by individual regular expressions\n\t\t\t\tfor (var i=0; i<terminal.length; ++i) {\n\t\t\t\t\tconsumed= stream.match(terminal[i].regex,true,false);\n\t\t\t\t\tif (consumed)\n\t\t\t\t\t\treturn { cat: terminal[i].name,\n\t\t\t\t\t\t\t\t\t\t style: terminal[i].style,\n\t\t\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t\t\t };\n\t\t\t\t}\n\t\n\t\t\t\t// Keywords\n\t\t\t\tconsumed= stream.match(keywords,true,false);\n\t\t\t\tif (consumed)\n\t\t\t\t\treturn { cat: stream.current().toUpperCase(),\n\t\t\t\t\t\t\t\t\t style: \"keyword\",\n\t\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t\t };\n\t\n\t\t\t\t// Punctuation\n\t\t\t\tconsumed= stream.match(punct,true,false);\n\t\t\t\tif (consumed)\n\t\t\t\t\treturn { cat: stream.current(),\n\t\t\t\t\t\t\t\t\t style: \"punc\",\n\t\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t\t };\n\t\n\t\t\t\t// Token is invalid\n\t\t\t\t// better consume something anyway, or else we're stuck\n\t\t\t\tconsumed= stream.match(/^.[A-Za-z0-9]*/,true,false);\n\t\t\t\treturn { cat:\"<invalid_token>\",\n\t\t\t\t\t\t\t\t style: \"error\",\n\t\t\t\t\t\t\t\t text: consumed[0]\n\t\t\t\t\t\t\t };\n\t\t\t}\n\t\n\t\t\tfunction recordFailurePos() {\n\t\t\t\t// tokenOb.style= \"sp-invalid\";\n\t\t\t\tvar col= stream.column();\n\t\t\t\tstate.errorStartPos= col;\n\t\t\t\tstate.errorEndPos= col+tokenOb.text.length;\n\t\t\t};\n\t\n\t\t\tfunction setQueryType(s) {\n\t\t\t\tif (state.queryType==null) {\n\t\t\t\t\tif (s ==\"SELECT\" || s==\"CONSTRUCT\" || s==\"ASK\" || s==\"DESCRIBE\" || s==\"INSERT\" || s==\"DELETE\" || s==\"LOAD\" || s==\"CLEAR\" || s==\"CREATE\" || s==\"DROP\" || s==\"COPY\" || s==\"MOVE\" || s==\"ADD\")\n\t\t\t\t\t\tstate.queryType=s;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Some fake non-terminals are just there to have side-effect on state\n\t\t\t// - i.e. allow or disallow variables and bnodes in certain non-nesting\n\t\t\t// contexts\n\t\t\tfunction setSideConditions(topSymbol) {\n\t\t\t\tif (topSymbol==\"disallowVars\") state.allowVars=false;\n\t\t\t\telse if (topSymbol==\"allowVars\") state.allowVars=true;\n\t\t\t\telse if (topSymbol==\"disallowBnodes\") state.allowBnodes=false;\n\t\t\t\telse if (topSymbol==\"allowBnodes\") state.allowBnodes=true;\n\t\t\t\telse if (topSymbol==\"storeProperty\") state.storeProperty=true;\n\t\t\t}\n\t\n\t\t\tfunction checkSideConditions(topSymbol) {\n\t\t\t\treturn(\n\t\t\t\t\t(state.allowVars || topSymbol!=\"var\") &&\n\t\t\t\t\t\t(state.allowBnodes ||\n\t\t\t\t\t\t (topSymbol!=\"blankNode\" &&\n\t\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyList\" &&\n\t\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyListPath\")));\n\t\t\t}\n\t\n\t\t\t// CodeMirror works with one line at a time,\n\t\t\t// but newline should behave like whitespace\n\t\t\t// - i.e. a definite break between tokens (for autocompleter)\n\t\t\tif (stream.pos==0)\n\t\t\t\tstate.possibleCurrent= state.possibleNext;\n\t\n\t\t\tvar tokenOb= nextToken();\n\t\n\t\n\t\t\tif (tokenOb.cat==\"<invalid_token>\") {\n\t\t\t\t// set error state, and\n\t\t\t\tif (state.OK==true) {\n\t\t\t\t\tstate.OK=false;\n\t\t\t\t\trecordFailurePos();\n\t\t\t\t}\n\t\t\t\tstate.complete=false;\n\t\t\t\t// alert(\"Invalid:\"+tokenOb.text);\n\t\t\t\treturn tokenOb.style;\n\t\t\t}\n\t\n\t\t\tif (tokenOb.cat == \"WS\" ||\n\t\t\t\t\ttokenOb.cat == \"COMMENT\") {\n\t\t\t\tstate.possibleCurrent= state.possibleNext;\n\t\t\t\treturn(tokenOb.style);\n\t\t\t}\n\t\t\t// Otherwise, run the parser until the token is digested\n\t\t\t// or failure\n\t\t\tvar finished= false;\n\t\t\tvar topSymbol;\n\t\t\tvar token= tokenOb.cat;\n\t\n\t\t\t// Incremental LL1 parse\n\t\t\twhile(state.stack.length>0 && token && state.OK && !finished ) {\n\t\t\t\ttopSymbol= state.stack.pop();\n\t\n\t\t\t\tif (!ll1_table[topSymbol]) {\n\t\t\t\t\t// Top symbol is a terminal\n\t\t\t\t\tif (topSymbol==token) {\n\t\t\t\t\t\t// Matching terminals\n\t\t\t\t\t\t// - consume token from input stream\n\t\t\t\t\t\tfinished=true;\n\t\t\t\t\t\tsetQueryType(topSymbol);\n\t\t\t\t\t\t// Check whether $ (end of input token) is poss next\n\t\t\t\t\t\t// for everything on stack\n\t\t\t\t\t\tvar allNillable=true;\n\t\t\t\t\t\tfor(var sp=state.stack.length;sp>0;--sp) {\n\t\t\t\t\t\t\tvar item=ll1_table[state.stack[sp-1]];\n\t\t\t\t\t\t\tif (!item || !item[\"$\"])\n\t\t\t\t\t\t\t\tallNillable=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstate.complete= allNillable;\n\t\t\t\t\t\tif (state.storeProperty && token.cat!=\"punc\") {\n\t\t\t\t\t\t\t\tstate.lastProperty= tokenOb.text;\n\t\t\t\t\t\t\t\tstate.storeProperty= false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// topSymbol is nonterminal\n\t\t\t\t\t// - see if there is an entry for topSymbol\n\t\t\t\t\t// and nextToken in table\n\t\t\t\t\tvar nextSymbols= ll1_table[topSymbol][token];\n\t\t\t\t\tif (nextSymbols!=undefined\n\t\t\t\t\t\t\t&& checkSideConditions(topSymbol)\n\t\t\t\t\t\t )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Match - copy RHS of rule to stack\n\t\t\t\t\t\tfor (var i=nextSymbols.length-1; i>=0; --i)\n\t\t\t\t\t\t\tstate.stack.push(nextSymbols[i]);\n\t\t\t\t\t\t// Peform any non-grammatical side-effects\n\t\t\t\t\t\tsetSideConditions(topSymbol);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No match in table - fail\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t\tstate.stack.push(topSymbol);  // Shove topSymbol back on stack\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!finished && state.OK) { \n\t\t\t\tstate.OK=false; state.complete=false; recordFailurePos(); \n\t    }\n\t\n\t\t\tstate.possibleCurrent= state.possibleNext;\n\t\t\tstate.possibleNext= getPossibles(state.stack[state.stack.length-1]);\n\t\n\t\t\t// alert(token+\"=\"+tokenOb.style+'\\n'+state.stack);\n\t\t\treturn tokenOb.style;\n\t\t}\n\t\n\t\tvar indentTop={\n\t\t\t\"*[,, object]\": 3,\n\t\t\t\"*[(,),object]\": 3,\n\t\t\t\"*[(,),objectPath]\": 3,\n\t\t\t\"*[/,pathEltOrInverse]\": 2,\n\t\t\t\"object\": 2,\n\t\t\t\"objectPath\": 2,\n\t\t\t\"objectList\": 2,\n\t\t\t\"objectListPath\": 2,\n\t\t\t\"storeProperty\": 2,\n\t\t\t\"pathMod\": 2,\n\t\t\t\"?pathMod\": 2,\n\t\t\t\"propertyListNotEmpty\": 1,\n\t\t\t\"propertyList\": 1,\n\t\t\t\"propertyListPath\": 1,\n\t\t\t\"propertyListPathNotEmpty\": 1,\n\t\t\t\"?[verb,objectList]\": 1,\n\t\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\n\t\t};\n\t\n\t\tvar indentTable={\n\t\t\t\"}\":1,\n\t\t\t\"]\":0,\n\t\t\t\")\":1,\n\t\t\t\"{\":-1,\n\t\t\t\"(\":-1,\n\t\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\n\t\t};\n\t\t\n\t\n\t\tfunction indent(state, textAfter) {\n\t\t\tvar n = 0; // indent level\n\t\t\tvar i=state.stack.length-1;\n\t\n\t\t\tif (/^[\\}\\]\\)]/.test(textAfter)) {\n\t\t\t\t// Skip stack items until after matching bracket\n\t\t\t\tvar closeBracket=textAfter.substr(0,1);\n\t\t\t\tfor( ;i>=0;--i)\n\t\t\t\t{\n\t\t\t\t\tif (state.stack[i]==closeBracket)\n\t\t\t\t\t{--i; break;};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Consider nullable non-terminals if at top of stack\n\t\t\t\tvar dn=indentTop[state.stack[i]];\n\t\t\t\tif (dn) { \n\t\t\t\t\tn+=dn; --i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor( ;i>=0;--i)\n\t\t\t{\n\t\t\t\tvar dn=indentTable[state.stack[i]];\n\t\t\t\tif (dn) {\n\t\t\t\t\tn+=dn;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n * config.indentUnit;\n\t\t};\n\t\n\t\treturn {\n\t\t\ttoken: tokenBase,\n\t\t\tstartState: function(base) {\n\t\t\t\treturn {\n\t\t\t\t\ttokenize: tokenBase,\n\t\t\t\t\tOK: true,\n\t\t\t\t\tcomplete: acceptEmpty,\n\t\t\t\t\terrorStartPos: null,\n\t\t\t\t\terrorEndPos: null,\n\t\t\t\t\tqueryType: defaultQueryType,\n\t\t\t\t\tpossibleCurrent: getPossibles(startSymbol),\n\t\t\t\t\tpossibleNext: getPossibles(startSymbol),\n\t\t\t\t\tallowVars : true,\n\t\t\t\t\tallowBnodes : true,\n\t\t\t\t\tstoreProperty : false,\n\t\t\t\t\tlastProperty : \"\",\n\t\t\t\t\tstack: [startSymbol]\n\t\t\t\t}; \n\t\t\t},\n\t\t\tindent: indent,\n\t\t\telectricChars: \"}])\"\n\t\t};\n\t}\n\t);\n\tCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "/*\n* TRIE implementation in Javascript\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* Date: Nov 7, 2010\n*/\n\n/*\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet. \n* It has been used to store large dictionaries of English (say) words in spell-checking programs \n* and in natural-language \"understanding\" programs.    \n* @see http://en.wikipedia.org/wiki/Trie\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\n/*\n\n* @class Trie\n* @constructor\n*/  \nmodule.exports = Trie = function() {\n    this.words = 0;\n    this.prefixes = 0;\n    this.children = [];\n};\n\nTrie.prototype = {\n    \n    /*\n    * Insert a word into the dictionary. \n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\n    *\n    * @method insert\n    * @param {String} str Word to insert in the dictionary\n    * @param {Integer} pos Current index of the string to be inserted\n    * @return {Void}\n    */\n    insert: function(str, pos) {\n        if(str.length == 0) { //blank string cannot be inserted\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n            \n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            T.words ++;\n            return;\n        }\n        T.prefixes ++;\n        k = str[pos];\n        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one\n            T.children[k] = new Trie();\n        }\n        child = T.children[k];\n        child.insert(str, pos + 1);\n    },\n    \n    /*\n    * Remove a word from the dictionary.\n    *\n    * @method remove\n    * @param {String} str Word to be removed\n    * @param {Integer} pos Current index of the string to be removed\n    * @return {Void}\n    */\n    remove: function(str, pos) {\n        if(str.length == 0) {\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(T === undefined) {\n            return;\n        }\n        if(pos === str.length) {\n            T.words --;\n            return;\n        }\n        T.prefixes --;\n        k = str[pos];\n        child = T.children[k];\n        child.remove(str, pos + 1);\n    },\n    \n    /*\n    * Update an existing word in the dictionary. \n    * This method removes the old word from the dictionary and inserts the new word.\n    *\n    * @method update\n    * @param {String} strOld The old word to be replaced\n    * @param {String} strNew The new word to be inserted\n    * @return {Void}\n    */\n    update: function(strOld, strNew) {\n        if(strOld.length == 0 || strNew.length == 0) {\n            return;\n        }\n        this.remove(strOld);\n        this.insert(strNew);\n    },\n    \n    /*\n    * Count the number of times a given word has been inserted into the dictionary\n    *\n    * @method countWord\n    * @param {String} str Word to get count of\n    * @param {Integer} pos Current index of the given word\n    * @return {Integer} The number of times a given word exists in the dictionary\n    */\n    countWord: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(pos === str.length) {\n            return T.words;\n        }\n        k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countWord(str, pos + 1);\n        }\n        return ret;\n    },\n    \n    /*\n    * Count the number of times a given prefix exists in the dictionary\n    *\n    * @method countPrefix\n    * @param {String} str Prefix to get count of\n    * @param {Integer} pos Current index of the given prefix\n    * @return {Integer} The number of times a given prefix exists in the dictionary\n    */\n    countPrefix: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n\n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            return T.prefixes;\n        }\n        var k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countPrefix(str, pos + 1); \n        }\n        return ret; \n    },\n    \n    /*\n    * Find a word in the dictionary\n    *\n    * @method find\n    * @param {String} str The word to find in the dictionary\n    * @return {Boolean} True if the word exists in the dictionary, else false\n    */\n    find: function(str) {\n        if(str.length == 0) {\n            return false;\n        }\n        \n        if(this.countWord(str) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    \n    /*\n    * Get all words in the dictionary\n    *\n    * @method getAllWords\n    * @param {String} str Prefix of current word\n    * @return {Array} Array of words in the dictionary\n    */\n    getAllWords: function(str) {\n        var T = this,\n            k,\n            child,\n            ret = [];\n        if(str === undefined) {\n            str = \"\";\n        }\n        if(T === undefined) {\n            return [];\n        }\n        if(T.words > 0) {\n            ret.push(str);\n        }\n        for(k in T.children) {\n            child = T.children[k];\n            ret = ret.concat(child.getAllWords(str + k));\n        }\n        return ret;\n    },\n    \n    /*\n    * Autocomplete a given prefix\n    *\n    * @method autoComplete\n    * @param {String} str Prefix to be completed based on dictionary entries\n    * @param {Integer} pos Current index of the prefix\n    * @return {Array} Array of possible suggestions\n    */\n    autoComplete: function(str, pos) {\n        \n        \n        var T = this,\n            k,\n            child;\n        if(str.length == 0) {\n\t\t\tif (pos === undefined) {\n\t\t\t\treturn T.getAllWords(str);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n        }\n        if(pos === undefined) {\n            pos = 0;\n        }   \n        k = str[pos];\n        child = T.children[k];\n        if(child === undefined) { //node doesn't exist\n            return [];\n        }\n        if(pos === str.length - 1) {\n            return child.getAllWords(str);\n        }\n        return child.autoComplete(str, pos + 1);\n    }\n};\n",
    "(function (global){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((typeof window !== \"undefined\" ? window.CodeMirror : typeof global !== \"undefined\" ? global.CodeMirror : null));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.display.input.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "(function (global){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((typeof window !== \"undefined\" ? window.CodeMirror : typeof global !== \"undefined\" ? global.CodeMirror : null));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    // We want a single cursor position.\n    if (this.listSelections().length > 1 || this.somethingSelected()) return;\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    var getHints = completion.options.hint;\n    if (!getHints) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    if (getHints.async)\n      getHints(this, function(hints) { completion.showHints(hints); }, completion.options);\n    else\n      return completion.showHints(getHints(this, completion.options));\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = this.buildOptions(options);\n    this.widget = this.onClose = null;\n  }\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n\n      if (this.widget) this.widget.close();\n      if (this.onClose) this.onClose();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    showHints: function(data) {\n      if (!data || !data.list.length || !this.active()) return this.close();\n\n      if (this.options.completeSingle && data.list.length == 1)\n        this.pick(data, 0);\n      else\n        this.showWidget(data);\n    },\n\n    showWidget: function(data) {\n      this.widget = new Widget(this, data);\n      CodeMirror.signal(data, \"shown\");\n\n      var debounce = 0, completion = this, finished;\n      var closeOn = this.options.closeCharacters;\n      var startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;\n\n      var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n        return setTimeout(fn, 1000/60);\n      };\n      var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n      function done() {\n        if (finished) return;\n        finished = true;\n        completion.close();\n        completion.cm.off(\"cursorActivity\", activity);\n        if (data) CodeMirror.signal(data, \"close\");\n      }\n\n      function update() {\n        if (finished) return;\n        CodeMirror.signal(data, \"update\");\n        var getHints = completion.options.hint;\n        if (getHints.async)\n          getHints(completion.cm, finishUpdate, completion.options);\n        else\n          finishUpdate(getHints(completion.cm, completion.options));\n      }\n      function finishUpdate(data_) {\n        data = data_;\n        if (finished) return;\n        if (!data || !data.list.length) return done();\n        if (completion.widget) completion.widget.close();\n        completion.widget = new Widget(completion, data);\n      }\n\n      function clearDebounce() {\n        if (debounce) {\n          cancelAnimationFrame(debounce);\n          debounce = 0;\n        }\n      }\n\n      function activity() {\n        clearDebounce();\n        var pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);\n        if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||\n            pos.ch < startPos.ch || completion.cm.somethingSelected() ||\n            (pos.ch && closeOn.test(line.charAt(pos.ch - 1)))) {\n          completion.close();\n        } else {\n          debounce = requestAnimationFrame(update);\n          if (completion.widget) completion.widget.close();\n        }\n      }\n      this.cm.on(\"cursorActivity\", activity);\n      this.onClose = done;\n    },\n\n    buildOptions: function(options) {\n      var editor = this.cm.options.hintOptions;\n      var out = {};\n      for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n      if (editor) for (var prop in editor)\n        if (editor[prop] !== undefined) out[prop] = editor[prop];\n      if (options) for (var prop in options)\n        if (options[prop] !== undefined) out[prop] = options[prop];\n      return out;\n    }\n  };\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.left - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    var startScroll = cm.getScrollInfo();\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", function(cm, options) {\n    var helpers = cm.getHelpers(cm.getCursor(), \"hint\"), words;\n    if (helpers.length) {\n      for (var i = 0; i < helpers.length; i++) {\n        var cur = helpers[i](cm, options);\n        if (cur && cur.list.length) return cur;\n      }\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      if (words) return CodeMirror.hint.fromList(cm, {words: words});\n    } else if (CodeMirror.hint.anyword) {\n      return CodeMirror.hint.anyword(cm, options);\n    }\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, token.string.length) == token.string)\n        found.push(word);\n    }\n\n    if (found.length) return {\n      list: found,\n      from: CodeMirror.Pos(cur.line, token.start),\n            to: CodeMirror.Pos(cur.line, token.end)\n    };\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: false,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "(function (global){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((typeof window !== \"undefined\" ? window.CodeMirror : typeof global !== \"undefined\" ? global.CodeMirror : null));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.nodeType == 1) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "(function (global){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((typeof window !== \"undefined\" ? window.CodeMirror : typeof global !== \"undefined\" ? global.CodeMirror : null));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [], next;\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (next = cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    ";(function(win){\n\tvar store = {},\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.set = function(key, value) {}\n\tstore.get = function(key) {}\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tvar val = store.get(key)\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (typeof val == 'undefined') { val = defaultVal || {} }\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key) { return store.deserialize(storage.getItem(key)) }\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tfunction withIEStorage(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tfunction ieKeyFix(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\treturn store.deserialize(storage.getAttribute(key))\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=0, attr; attr=attributes[i]; i++) {\n\t\t\t\tstorage.removeAttribute(attr.name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\n\tif (typeof module != 'undefined' && module.exports && this.module !== module) { module.exports = store }\n\telse if (typeof define === 'function' && define.amd) { define(store) }\n\telse { win.store = store }\n\n})(Function('return this')());\n",
    "module.exports={\n  \"name\": \"yasgui-utils\",\n  \"version\": \"1.3.2\",\n  \"description\": \"Utils for YASGUI libs\",\n  \"main\": \"src/main.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"url\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"readme\": \"A simple utils repo for the YASGUI tools\\n\",\n  \"readmeFilename\": \"README.md\",\n  \"_id\": \"yasgui-utils@1.3.2\",\n  \"dist\": {\n    \"shasum\": \"e861884bb67d1f792d37a25fed9140d090b97b7b\"\n  },\n  \"_from\": \"yasgui-utils@1.3.2\",\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.3.2.tgz\"\n}\n",
    "(function (global){\n/**\n * Determine unique ID of the YASQE object. Useful when several objects are\n * loaded on the same page, and all have 'persistency' enabled. Currently, the\n * ID is determined by selecting the nearest parent in the DOM with an ID set\n * \n * @param doc {YASQE}\n * @method YASQE.determineId\n */\nvar root = module.exports = function(element) {\n\treturn (typeof window !== \"undefined\" ? window.jQuery : typeof global !== \"undefined\" ? global.jQuery : null)(element).closest('[id]').attr('id');\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})",
    "var root = module.exports = {\n\tcross: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"30px\" height=\"30px\" viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\"><g>\t<path d=\"M83.288,88.13c-2.114,2.112-5.575,2.112-7.689,0L53.659,66.188c-2.114-2.112-5.573-2.112-7.687,0L24.251,87.907   c-2.113,2.114-5.571,2.114-7.686,0l-4.693-4.691c-2.114-2.114-2.114-5.573,0-7.688l21.719-21.721c2.113-2.114,2.113-5.573,0-7.686   L11.872,24.4c-2.114-2.113-2.114-5.571,0-7.686l4.842-4.842c2.113-2.114,5.571-2.114,7.686,0L46.12,33.591   c2.114,2.114,5.572,2.114,7.688,0l21.721-21.719c2.114-2.114,5.573-2.114,7.687,0l4.695,4.695c2.111,2.113,2.111,5.571-0.003,7.686   L66.188,45.973c-2.112,2.114-2.112,5.573,0,7.686L88.13,75.602c2.112,2.111,2.112,5.572,0,7.687L83.288,88.13z\"/></g></svg>',\n\tcheck: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"30px\" height=\"30px\" viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\"><path fill=\"#000000\" d=\"M14.301,49.982l22.606,17.047L84.361,4.903c2.614-3.733,7.76-4.64,11.493-2.026l0.627,0.462  c3.732,2.614,4.64,7.758,2.025,11.492l-51.783,79.77c-1.955,2.791-3.896,3.762-7.301,3.988c-3.405,0.225-5.464-1.039-7.508-3.084  L2.447,61.814c-3.263-3.262-3.263-8.553,0-11.814l0.041-0.019C5.75,46.718,11.039,46.718,14.301,49.982z\"/></svg>',\n\tunsorted: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   id=\"Layer_1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 54.552711 113.78478\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"><g     id=\"g5\"     transform=\"matrix(-0.70522156,-0.70898699,-0.70898699,0.70522156,97.988199,55.081205)\"><path       style=\"fill:#000000\"       inkscape:connector-curvature=\"0\"       id=\"path7\"       d=\"M 57.911,66.915 45.808,55.063 42.904,52.238 31.661,41.25 31.435,41.083 31.131,40.775 30.794,40.523 30.486,40.3 30.069,40.05 29.815,39.911 29.285,39.659 29.089,39.576 28.474,39.326 28.363,39.297 H 28.336 L 27.665,39.128 27.526,39.1 26.94,38.99 26.714,38.961 26.212,38.934 h -0.31 -0.444 l -0.339,0.027 c -1.45,0.139 -2.876,0.671 -4.11,1.564 l -0.223,0.141 -0.279,0.25 -0.335,0.308 -0.054,0.029 -0.171,0.194 -0.334,0.364 -0.224,0.279 -0.25,0.336 -0.225,0.362 -0.192,0.308 -0.197,0.421 -0.142,0.279 -0.193,0.477 -0.084,0.222 -12.441,38.414 c -0.814,2.458 -0.313,5.029 1.115,6.988 v 0.026 l 0.418,0.532 0.17,0.165 0.251,0.281 0.084,0.079 0.283,0.281 0.25,0.194 0.474,0.367 0.083,0.053 c 2.015,1.371 4.641,1.874 7.131,1.094 L 55.228,80.776 c 4.303,-1.342 6.679,-5.814 5.308,-10.006 -0.387,-1.259 -1.086,-2.35 -1.979,-3.215 l -0.368,-0.337 -0.278,-0.303 z m -6.318,5.896 0.079,0.114 -37.369,11.57 11.854,-36.538 10.565,10.317 2.876,2.825 11.995,11.712 z\" /></g><path     style=\"fill:#000000\"     inkscape:connector-curvature=\"0\"     id=\"path7-9\"     d=\"m 8.8748339,52.571766 16.9382111,-0.222584 4.050851,-0.06665 15.719154,-0.222166 0.27778,-0.04246 0.43276,0.0017 0.41632,-0.06121 0.37532,-0.0611 0.47132,-0.119342 0.27767,-0.08206 0.55244,-0.198047 0.19707,-0.08043 0.61095,-0.259721 0.0988,-0.05825 0.019,-0.01914 0.59303,-0.356548 0.11787,-0.0788 0.49125,-0.337892 0.17994,-0.139779 0.37317,-0.336871 0.21862,-0.219786 0.31311,-0.31479 0.21993,-0.259387 c 0.92402,-1.126057 1.55249,-2.512251 1.78961,-4.016904 l 0.0573,-0.25754 0.0195,-0.374113 0.0179,-0.454719 0.0175,-0.05874 -0.0169,-0.258049 -0.0225,-0.493503 -0.0398,-0.355569 -0.0619,-0.414201 -0.098,-0.414812 -0.083,-0.353334 L 53.23955,41.1484 53.14185,40.850967 52.93977,40.377742 52.84157,40.161628 34.38021,4.2507375 C 33.211567,1.9401875 31.035446,0.48226552 28.639484,0.11316952 l -0.01843,-0.01834 -0.671963,-0.07882 -0.236871,0.0042 L 27.335984,-4.7826577e-7 27.220736,0.00379952 l -0.398804,0.0025 -0.313848,0.04043 -0.594474,0.07724 -0.09611,0.02147 C 23.424549,0.60716252 21.216017,2.1142355 20.013025,4.4296865 L 0.93967491,40.894479 c -2.08310801,3.997178 -0.588125,8.835482 3.35080799,10.819749 1.165535,0.613495 2.43199,0.88731 3.675026,0.864202 l 0.49845,-0.02325 0.410875,0.01658 z M 9.1502369,43.934401 9.0136999,43.910011 27.164145,9.2564625 44.70942,43.42818 l -14.765289,0.214677 -4.031106,0.0468 -16.7627881,0.244744 z\" /></svg>',\n\tsortDesc: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   id=\"Layer_1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 54.552711 113.78478\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"><g     id=\"g5\"     transform=\"matrix(-0.70522156,-0.70898699,-0.70898699,0.70522156,97.988199,55.081205)\"><path       style=\"fill:#000000\"       inkscape:connector-curvature=\"0\"       id=\"path7\"       d=\"M 57.911,66.915 45.808,55.063 42.904,52.238 31.661,41.25 31.435,41.083 31.131,40.775 30.794,40.523 30.486,40.3 30.069,40.05 29.815,39.911 29.285,39.659 29.089,39.576 28.474,39.326 28.363,39.297 H 28.336 L 27.665,39.128 27.526,39.1 26.94,38.99 26.714,38.961 26.212,38.934 h -0.31 -0.444 l -0.339,0.027 c -1.45,0.139 -2.876,0.671 -4.11,1.564 l -0.223,0.141 -0.279,0.25 -0.335,0.308 -0.054,0.029 -0.171,0.194 -0.334,0.364 -0.224,0.279 -0.25,0.336 -0.225,0.362 -0.192,0.308 -0.197,0.421 -0.142,0.279 -0.193,0.477 -0.084,0.222 -12.441,38.414 c -0.814,2.458 -0.313,5.029 1.115,6.988 v 0.026 l 0.418,0.532 0.17,0.165 0.251,0.281 0.084,0.079 0.283,0.281 0.25,0.194 0.474,0.367 0.083,0.053 c 2.015,1.371 4.641,1.874 7.131,1.094 L 55.228,80.776 c 4.303,-1.342 6.679,-5.814 5.308,-10.006 -0.387,-1.259 -1.086,-2.35 -1.979,-3.215 l -0.368,-0.337 -0.278,-0.303 z m -6.318,5.896 0.079,0.114 -37.369,11.57 11.854,-36.538 10.565,10.317 2.876,2.825 11.995,11.712 z\" /></g><path     style=\"fill:#000000\"     inkscape:connector-curvature=\"0\"     id=\"path9\"     d=\"m 27.813273,0.12823506 0.09753,0.02006 c 2.39093,0.458209 4.599455,1.96811104 5.80244,4.28639004 L 52.785897,40.894525 c 2.088044,4.002139 0.590949,8.836902 -3.348692,10.821875 -1.329078,0.688721 -2.766603,0.943695 -4.133174,0.841768 l -0.454018,0.02 L 27.910392,52.354171 23.855313,52.281851 8.14393,52.061827 7.862608,52.021477 7.429856,52.021738 7.014241,51.959818 6.638216,51.900838 6.164776,51.779369 5.889216,51.699439 5.338907,51.500691 5.139719,51.419551 4.545064,51.145023 4.430618,51.105123 4.410168,51.084563 3.817138,50.730843 3.693615,50.647783 3.207314,50.310611 3.028071,50.174369 2.652795,49.833957 2.433471,49.613462 2.140099,49.318523 1.901127,49.041407 C 0.97781,47.916059 0.347935,46.528448 0.11153,45.021676 L 0.05352,44.766255 0.05172,44.371683 0.01894,43.936017 0,43.877277 0.01836,43.62206 0.03666,43.122889 0.0765,42.765905 0.13912,42.352413 0.23568,41.940425 0.32288,41.588517 0.481021,41.151945 0.579391,40.853806 0.77369,40.381268 0.876097,40.162336 19.338869,4.2542801 c 1.172169,-2.308419 3.34759,-3.76846504 5.740829,-4.17716604 l 0.01975,0.01985 0.69605,-0.09573 0.218437,0.0225 0.490791,-0.02132 0.39809,0.0046 0.315972,0.03973 0.594462,0.08149 z\" /></svg>',\n\tsortAsc: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   id=\"Layer_1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 54.552711 113.78478\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"><g     id=\"g5\"     transform=\"matrix(-0.70522156,0.70898699,-0.70898699,-0.70522156,97.988199,58.704807)\"><path       style=\"fill:#000000\"       inkscape:connector-curvature=\"0\"       id=\"path7\"       d=\"M 57.911,66.915 45.808,55.063 42.904,52.238 31.661,41.25 31.435,41.083 31.131,40.775 30.794,40.523 30.486,40.3 30.069,40.05 29.815,39.911 29.285,39.659 29.089,39.576 28.474,39.326 28.363,39.297 H 28.336 L 27.665,39.128 27.526,39.1 26.94,38.99 26.714,38.961 26.212,38.934 h -0.31 -0.444 l -0.339,0.027 c -1.45,0.139 -2.876,0.671 -4.11,1.564 l -0.223,0.141 -0.279,0.25 -0.335,0.308 -0.054,0.029 -0.171,0.194 -0.334,0.364 -0.224,0.279 -0.25,0.336 -0.225,0.362 -0.192,0.308 -0.197,0.421 -0.142,0.279 -0.193,0.477 -0.084,0.222 -12.441,38.414 c -0.814,2.458 -0.313,5.029 1.115,6.988 v 0.026 l 0.418,0.532 0.17,0.165 0.251,0.281 0.084,0.079 0.283,0.281 0.25,0.194 0.474,0.367 0.083,0.053 c 2.015,1.371 4.641,1.874 7.131,1.094 L 55.228,80.776 c 4.303,-1.342 6.679,-5.814 5.308,-10.006 -0.387,-1.259 -1.086,-2.35 -1.979,-3.215 l -0.368,-0.337 -0.278,-0.303 z m -6.318,5.896 0.079,0.114 -37.369,11.57 11.854,-36.538 10.565,10.317 2.876,2.825 11.995,11.712 z\" /></g><path     style=\"fill:#000000\"     inkscape:connector-curvature=\"0\"     id=\"path9\"     d=\"m 27.813273,113.65778 0.09753,-0.0201 c 2.39093,-0.45821 4.599455,-1.96811 5.80244,-4.28639 L 52.785897,72.891487 c 2.088044,-4.002139 0.590949,-8.836902 -3.348692,-10.821875 -1.329078,-0.688721 -2.766603,-0.943695 -4.133174,-0.841768 l -0.454018,-0.02 -16.939621,0.223997 -4.055079,0.07232 -15.711383,0.220024 -0.281322,0.04035 -0.432752,-2.61e-4 -0.415615,0.06192 -0.376025,0.05898 -0.47344,0.121469 -0.27556,0.07993 -0.550309,0.198748 -0.199188,0.08114 -0.594655,0.274528 -0.114446,0.0399 -0.02045,0.02056 -0.59303,0.35372 -0.123523,0.08306 -0.486301,0.337172 -0.179243,0.136242 -0.375276,0.340412 -0.219324,0.220495 -0.293372,0.294939 -0.238972,0.277116 C 0.97781,65.869953 0.347935,67.257564 0.11153,68.764336 L 0.05352,69.019757 0.05172,69.414329 0.01894,69.849995 0,69.908735 l 0.01836,0.255217 0.0183,0.499171 0.03984,0.356984 0.06262,0.413492 0.09656,0.411988 0.0872,0.351908 0.158141,0.436572 0.09837,0.298139 0.194299,0.472538 0.102407,0.218932 18.462772,35.908054 c 1.172169,2.30842 3.34759,3.76847 5.740829,4.17717 l 0.01975,-0.0199 0.69605,0.0957 0.218437,-0.0225 0.490791,0.0213 0.39809,-0.005 0.315972,-0.0397 0.594462,-0.0815 z\" /></svg>',\n\tloader: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\" fill=\"black\">  <circle cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(45 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.125s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(90 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.25s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(135 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.375s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(225 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.625s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(270 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.75s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(315 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.875s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle>  <circle transform=\"rotate(180 16 16)\" cx=\"16\" cy=\"3\" r=\"0\">    <animate attributeName=\"r\" values=\"0;3;0;0\" dur=\"1s\" repeatCount=\"indefinite\" begin=\"0.5s\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />  </circle></svg>',\n\tquery: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g id=\"Layer_1\"></g><g id=\"Layer_2\">\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\n\tqueryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"   ><g     id=\"Layer_1\"     transform=\"translate(-2.995,-2.411)\" /><g     id=\"Layer_2\"     transform=\"translate(-2.995,-2.411)\"><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       id=\"path6\"       inkscape:connector-curvature=\"0\" /></g><g     transform=\"matrix(0.76805408,0,0,0.76805408,-0.90231954,-2.0060895)\"     id=\"g3\"><path       style=\"fill:#c02608;fill-opacity:1\"       inkscape:connector-curvature=\"0\"       d=\"m 88.184,81.468 c 1.167,1.167 1.167,3.075 0,4.242 l -2.475,2.475 c -1.167,1.167 -3.076,1.167 -4.242,0 l -69.65,-69.65 c -1.167,-1.167 -1.167,-3.076 0,-4.242 l 2.476,-2.476 c 1.167,-1.167 3.076,-1.167 4.242,0 l 69.649,69.651 z\"       id=\"path5\" /></g><g     transform=\"matrix(0.76805408,0,0,0.76805408,-0.90231954,-2.0060895)\"     id=\"g7\"><path       style=\"fill:#c02608;fill-opacity:1\"       inkscape:connector-curvature=\"0\"       d=\"m 18.532,88.184 c -1.167,1.166 -3.076,1.166 -4.242,0 l -2.475,-2.475 c -1.167,-1.166 -1.167,-3.076 0,-4.242 l 69.65,-69.651 c 1.167,-1.167 3.075,-1.167 4.242,0 l 2.476,2.476 c 1.166,1.167 1.166,3.076 0,4.242 l -69.651,69.65 z\"       id=\"path9\" /></g></svg>',\n\tdownload: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g id=\"Captions\"></g><g id=\"Your_Icon\">\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\n\tshare: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" id=\"Icons\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path id=\"ShareThis\" d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\n\tdraw: function(parent, config) {\n\t\tif (!parent) return;\n\t\tvar el = root.getElement(config);\n\t\tif (el) {\n\t\t\t$(parent).append(el);\n\t\t}\n\t},\n\tgetElement: function(config) {\n\t\tvar svgString = (config.id? root[config.id]: config.value);\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\tif (!config.width) config.width = \"100%\";\n\t\t\tif (!config.height) config.height = \"100%\";\n\t\t\t\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.style.display = \"inline-block\";\n\t\t\tsvgContainer.style.width = config.width;\n\t\t\tsvgContainer.style.height = config.height;\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};",
    "window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tdetermineId: require(\"./determineId.js\"),\n\timgs: require(\"./imgs.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t}\n};\n",
    "var store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n\t\tif (typeof exp == \"string\") {\n\t\t\texp = times[exp]();\n\t\t}\n\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\tstore.set(key, {\n\t\t\tval : val,\n\t\t\texp : exp,\n\t\t\ttime : new Date().getTime()\n\t\t});\n\t},\n\tget : function(key) {\n\t\tvar info = store.get(key);\n\t\tif (!info) {\n\t\t\treturn null;\n\t\t}\n\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\treturn null;\n\t\t}\n\t\treturn info.val;\n\t}\n\n};\n",
    "module.exports={\n  \"name\": \"yasgui-yasqe\",\n  \"description\": \"Yet Another SPARQL Query Editor\",\n  \"version\": \"1.5.2\",\n  \"main\": \"src/main.js\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasqe.yasgui.org/license.txt\"\n    }\n  ],\n  \"author\": \"Laurens Rietveld\",\n  \"homepage\": \"http://yasqe.yasgui.org\",\n  \"devDependencies\": {\n    \"browserify\": \"^6.1.0\",\n    \"gulp\": \"~3.6.0\",\n    \"gulp-bump\": \"^0.1.11\",\n    \"gulp-concat\": \"^2.4.1\",\n    \"gulp-connect\": \"^2.0.5\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-filter\": \"^1.0.2\",\n    \"gulp-git\": \"^0.5.2\",\n    \"gulp-jsvalidate\": \"^0.2.0\",\n    \"gulp-livereload\": \"^1.3.1\",\n    \"gulp-minify-css\": \"^0.3.0\",\n    \"gulp-notify\": \"^1.2.5\",\n    \"gulp-rename\": \"^1.2.0\",\n    \"gulp-streamify\": \"0.0.5\",\n    \"gulp-tag-version\": \"^1.1.0\",\n    \"gulp-uglify\": \"^0.2.1\",\n    \"require-dir\": \"^0.1.0\",\n    \"run-sequence\": \"^1.0.1\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~0.1.1\",\n    \"watchify\": \"^0.6.4\",\n    \"browserify-shim\": \"^3.8.0\",\n    \"gulp-sourcemaps\": \"^1.2.4\",\n    \"exorcist\": \"^0.1.6\",\n    \"vinyl-transform\": \"0.0.1\"\n  },\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\n  },\n  \"dependencies\": {\n    \"jquery\": \"~ 1.11.0\",\n    \"codemirror\": \"^4.2.0\",\n    \"twitter-bootstrap-3.0.0\": \"^3.0.0\",\n    \"yasgui-utils\": \"^1.3.0\"\n  },\n  \"browserify-shim\": {\n    \"jquery\": \"global:jQuery\",\n    \"codemirror\": \"global:CodeMirror\",\n    \"../../lib/codemirror\": \"global:CodeMirror\"\n  }\n}\n"
  ]
}